#!/usr/bin/env sh
# Compile and show its PDF of a TeX file, then compile it every time it is accessed/modified/etc.
# Compilation on access is intended behaviour.
# This was written as a more robust alternative to latexmk as it seemed to fail and/or get stuck quite a lot.
# TODO: Make argument parsing more convenient.
# TODO: Limit CPU usage of xelatex. ([cpulimit ... -- xelatex ...] did not work)

clean() {
    cleanaux
    rm "$fl.pdf" > /dev/null 2>&1
}

cleanaux() {
    rm "$fl.aux" "$fl.bbl" "$fl.blg" "$fl.lof" "$fl.log" "$fl.lot" "$fl.out" "$fl.toc" "$fl.bcf" "$fl.run.xml" "$fl.py" "$fl.py.err" "$fl.py.out" "latex.py" > /dev/null 2>&1
}

compile() {
    # Adapted from https://tex.stackexchange.com/a/8792/199300
    xelatex -shell-escape -halt-on-error "$fl" || {
        cleanaux
        xelatex -shell-escape -halt-on-error "$fl" || return 1
    }
    bibtex "$fl"
    biber "$fl"
    makeindex "$fl".idx 2> /dev/null
    # makeindex -s style.gls ...
    xelatex -shell-escape -halt-on-error "$fl"
    xelatex -shell-escape -halt-on-error "$fl"
}

exitonwrite() {
    inotifywait -e close_write,close_nowrite "$fl.tex" > /dev/null 2>&1
    cleanaux
    exit 0
}

main() {
    while true
    do
        inotifywait -e move_self "$fl.tex" > /dev/null 2>&1
        compile > /dev/null 2>&1
    done
}

if [ "$1" = "" ]
then
    fl="main"
    printf "%s\n" "No file name given, assuming main."
else
    fl="$( printf "%s" "$1" | sed 's/\.tex$//' )"
fi

[ -f "$fl.tex" ] || {
    printf "%s\n" "No such file exists."
    exit 0
}

clean
compile > /dev/null 2>&1

for i
do
    if [ "$i" = "-o" ] || [ "$i" = "--once" ]
    then
        cleanaux
        exit 0
    fi
done

eval "'$READER' '$fl.pdf'" > /dev/null 2>&1 &
exitonwrite &
main > /dev/null 2>&1 &
eval "'$EDITOR' '$fl.tex'"
