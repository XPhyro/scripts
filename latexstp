#!/usr/bin/env sh
# Compile and show its PDF of a TeX file, then compile it every time it is modified.
# This was written as a more robust alternative to latexmk as it seemed to fail and/or get stuck quite a lot.
#
# TODO: Limit CPU usage of xelatex. ([cpulimit ... -- xelatex ...] did not work)
# TODO: Should child latexstps be spawned for every positional argument? Should only one positional argument be accepted? Should the first positional argument be considered the source file and the rest just be opened along with the source file with the editor? Currently multiple are accepted, but only the first one is considered.

printhelp() {
    printf "%s\n" \
        "latexstp [OPTION...] [FILES...] -- [FILES...]" \
        "   -f, --force" \
        "       Force compile even if hash-check succeeds." \
        "   --no-force" \
        "       Revert -f." \
        "   -o, --once" \
        "       Compile once and exit." \
        "   --no-once" \
        "       Revert -o." \
        "   -h, --help" \
        "       Print help message."
}

printusage() {
    printf "Option [%s] is not valid.\n\n" "$1" >&2
    printhelp
}

logerrq() {
    printf "[ERROR]: %s\n" "$1" >&2
    exit 1
}

assertarg() {
    [ -z "$3" ] && logerrq "Expected $2 argument to $1, exiting."
}

assertfl() {
    [ -f "$1" ] || logerrq "No such file as $1, exiting."
}

parseargs() {
    while [ -n "$1" ]
    do
        if [ "${1%"${1#?}"}" = "-" ]
        then
            if [ "${1%"${1#??}"}" != "--" ]
            then
                sopt="${1#?}"

                while [ -n "$sopt" ]
                do
                    opt="$( printf "%s" "$sopt" | cut -c1 )"

                    case "$opt"
                    in
                        f) parseargs --force;;
                        o) parseargs --once;;
                        h) parseargs --help;;
                        *) printusage "-$opt"; exit 0;;
                    esac

                    sopt="${sopt#?}"
                done
            else
                opt="${1#??}"

                case "$opt"
                in
                    force    ) optforce="1";;
                    no-force ) optforce="0";;
                    once     ) optonce="1";;
                    no-once  ) optonce="0";;
                    help     ) printhelp; exit 0;;
                    ""       ) shift; break;;
                    *        ) printusage "--$opt"; exit 0;;
                esac
            fi
        else
            assertfl "$1.tex"
            fls="$1
$fls"
        fi

        shift
    done

    for i
    do
        assertfl "$i.tex"
        fls="$fls$i
"
    done
}

setdefargs() {
    cachedir="${XDG_CACHE_HOME:-"$HOME/.cache"}/latexstp"
}

processargs() {
    [ -z "$fls" ] && logerrq "Expected at least one file, exiting."
    srcfl="$( printf "%s\n" "$fls" | head -n 1 )"
    hardlinked "$srcfl" "$( basename "$srcfl" )" || logerrq "Source file must be in the current directory."
    srchashfl="$cachedir$( realpath "$srcfl.tex" )"
    mkdir -p "$( dirname "$srchashfl" )" || {
        i="$srchashfl"
        while true
        do
            [ -e "$i" ] && {
                rm -rf "$i"
                break
            }
            
            i="$( dirname "$i" )"
            [ "$i" = "$cachedir" ] && logerrq "Could not resolve cache, exiting."
        done
    }
}

clean() {
    cleanaux
    rm "$srcfl.pdf" > /dev/null 2>&1
}

printcleanaux() {
    printf "%s\n" "rm '$srcfl.aux' '$srcfl.bbl' '$srcfl.blg' '$srcfl.lof' '$srcfl.log' '$srcfl.lot' '$srcfl.out' '$srcfl.toc' '$srcfl.bcf' '$srcfl.run.xml' '$srcfl.py' '$srcfl.py.err' '$srcfl.py.out' 'latex.py' 'texput.log' > /dev/null 2>&1"
}

cleanaux() {
    eval "$( printcleanaux )"
}

printcompile() {
    printf "%s\n" "
    srchash=\"\$( sha512sum '$srcfl.tex' | awk '{print \$1}' )\"
    [ '$optforce' != '1' ] && [ -s '$srchashfl' ] && [ -s '$srcfl.pdf' ] && [ '$srchash' = \"\$( cat '$srchashfl' 2> /dev/null )\" ] && return 0
    
    # Adapted from https://tex.stackexchange.com/a/8792/199300
    xelatex -shell-escape -halt-on-error '$srcfl' || {
        cleanaux
        xelatex -shell-escape -halt-on-error '$srcfl' || return 1
    }
    bibtex '$srcfl'
    biber '$srcfl'
    makeindex '$srcfl'.idx 2> /dev/null
    # makeindex -s style.gls ...
    xelatex -shell-escape -halt-on-error '$srcfl'
    xelatex -shell-escape -halt-on-error '$srcfl'
    
    printf '%s\n' \"\$srchash\" > '$srchashfl'
    "
}

compile() {
    eval "$( printcompile )"
}

compileloop() {
    dwmpad sh -c "
    compile() {
        $( printcompile | sed "/^    \[ '1' != '1' \] &&/d" )
    }
    cleanaux() {
        $( printcleanaux )
    }

    while true
    do
        inotifywait -qq -e move_self '$srcfl.tex'
        compile
    done
    "
}

main() {
    cleanaux
    compile > /dev/null

    [ "$optonce" = "1" ] && {
        cleanaux
        exit 0
    }

    xdg-open "$srcfl.pdf" > /dev/null 2>&1 &
    compileloop > /dev/null 2>&1 &
    xdg-open "$srcfl.tex"
    compile > /dev/null 2>&1
    cleanaux
    kill 0 2>&1
}

setdefargs
parseargs "$@"
processargs
main
