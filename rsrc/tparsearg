# vim: ft=sh

printhelp() {
    printf "%s\n" \
    "scriptname [OPTION...] [DIRECTORIES...] [FILES...] -- [DIRECTORIES...] [FILES...]" \
    "   -a ARGUMENT, --argument ARGUMENT" \
    "       Do something with argument." \
    "   -c ARGUMENT, --can-be-empty-argument ARGUMENT" \
    "       Do something with argument that can be empty." \
    "   -o, --option" \
    "       Enable some option. Can be overridden with -i." \
    "   -i, --inverse-option" \
    "       Disable some option. Can be overridden with -o." \
    "   -t, --option-type" \
    "       Set some option. Can be overridden with other types." \
    "   -h, --help" \
    "       Print help message."
}

printusage() {
    printf "Option [%s] is not valid.\n\n" "$1"
    printhelp
}

assertarg() {
    [ "$3" ] || {
        printf "Expected %s argument to %s, exiting.\n" "$2" "$1"
        exit 1
    }
}

parseargs() {
    while [ -n "$1" ]
    do
        if [ "${1%"${1#?}"}" = "-" ]
        then
            if ! [ "${1%"${1#??}"}" = "--" ]
            then
                sopt="$( printf "%s" "$1" | cut -c2- )"

                while [ -n "$sopt" ]
                do
                    opt="$( printf "%s" "$sopt" | cut -c1 )"

                    case "$opt"
                    in
                        a) shift; assertarg "-a" "ARGUMENT" "$1"; argument="$1";;
                        c) shift; canbeemptyargument="$1";;
                        o) option="1";;
                        i) option="0";;
                        t) optiontype="-t";;
                        h) printhelp; exit 0;;
                        *) printusage "-$opt"; exit 0;;
                    esac

                    sopt="$( printf "%s" "$sopt" | cut -c2- )"
                done
            else
                opt="$( printf "%s" "$1" | cut -c3- )"
                
                case "$opt"
                in
                    argument              ) shift; assertarg "--argument" "ARGUMENT" "$1"; argument="$1";;
                    can-be-empty-argument ) shift; canbeemptyargument="$1";;
                    option                ) option="1";;
                    inverse-option        ) option="0";;
                    option-type           ) optiontype="--option-type";;
                    help                  ) printhelp; exit 0;;
                    ""                    ) shift; break;;
                    *                     ) printusage "--$opt"; exit 0;;
                esac
            fi
        else
            # positional argument
        fi

        shift
    done

    for i
    do
        # guaranteed positional argument
    done
}
