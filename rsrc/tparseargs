# vim: ft=sh

printhelp() {
    printf "%s\n" \
        "scriptname [OPTION...] [DIRECTORIES...] [FILES...] -- [DIRECTORIES...] [FILES...]" \
        "   -a ARGUMENT, --argument ARGUMENT" \
        "       Do something with argument." \
        "   -c ARGUMENT, --can-be-empty-argument ARGUMENT" \
        "       Do something with argument that can be empty." \
        "   -o, --option" \
        "       Enable some option. Can be overridden with -i." \
        "   -i, --inverse-option" \
        "       Disable some option. Can be overridden with -o." \
        "   -t, --option-type" \
        "       Set some option. Can be overridden with other types." \
        "   -h, --help" \
        "       Print help message."
}

printusage() {
    printf "Option [%s] is not valid.\n\n" "$1"
    printhelp
}

logerrq() {
    printf "[ERROR]: %s\n" "$1"
    exit 1
}

assertarg() {
    [ -z "$3" ] && logerrq "Expected $2 argument to $1, exiting."
}

assertfl() {
    [ -e "$1" ] || logerrq "No such file as $1, exiting."
}

assertrfl() {
    [ -f "$1" ] || logerrq "No such regular file as $1, exiting."
}

assertdir() {
    [ -d "$1" ] || logerrq "No such directory as $1, exiting."
}

parseargs() {
    while [ -n "$1" ]
    do
        if [ "${1%"${1#?}"}" = "-" ]
        then
            if  [ "${1%"${1#??}"}" != "--" ]
            then
                sopt="${1#?}"

                while [ -n "$sopt" ]
                do
                    opt="$( printf "%s" "$sopt" | cut -c1 )"

                    case "$opt"
                    in
                        a) shift; parseargs --argument "$1";;
                        c) shift; parseargs --can-be-empty-argument "$1";;
                        o) parseargs --option;;
                        i) parseargs --inverse-option;;
                        t) parseargs --option-type;;
                        h) parseargs --help;;
                        *) printusage "-$opt"; exit 0;;
                    esac

                    sopt="${sopt#?}"
                done
            else
                opt="${1#??}"
                
                case "$opt"
                in
                    argument              ) shift; assertarg "-a, --argument" "ARGUMENT" "$1"; optargument="$1";;
                    can-be-empty-argument ) shift; optcanbeemptyargument="$1";;
                    option                ) optoption="1";;
                    inverse-option        ) optoption="0";;
                    option-type           ) optoptiontype="--option-type";;
                    help                  ) printhelp; exit 0;;
                    ""                    ) shift; break;;
                    *                     ) printusage "--$opt"; exit 0;;
                esac
            fi
        else
            assertfl "$1" # change according to needs
            : # positional argument
        fi

        shift
    done

    for i
    do
        assertfl "$i" # change according to needs
        : # guaranteed positional argument
    done
}
