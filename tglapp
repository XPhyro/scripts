#!/usr/bin/env sh
# Toggle an application on/off (i.e. launch or kill it).
# TODO: Add the ability to toggle applications from a file, i.e. add the ability to read from a file toggleable things like getloc etc. This could be made into a generic toggling system, using keycodes like in getloc etc. This way, key bindings in sxhkd will not be changed when an application used for a purpose changes (spt instead of spotify etc.). # TODO: Use this with sxhkd.
# TODO: Add an option to replace the current instance of the application with the new instance. Allow the new instance to be different if -k is passed. If -k is not passed, but this new option is, just "restart" the application. # TODO: Use this, along with -T on, in .xinitrc.
# TODO: Add an option to register an already running application. Instead of toggling the application, just register the given pid, checking that the pid exists. If -k is passed, register to the given keycode. Else, query the command that is running as the pid and compute the hash based on that.

execname="${0##*/}"

printhelp() {
    printf "%s\n" \
"$execname [OPTION...] COMMAND -- COMMAND
   -a, --actual
       Use the actual status of applications to do work instead of the registered status. As an example, if an application is registered with a PID but is actually dead, the application will be cleaned and started if -P is passed. Inhibited by a following -p. See -p for more details.
   --no-actual
       Use the registered status of applications to do work instead of the actual status. As an example, if an application is registered with a PID but is actually dead, the application will be just be cleaned -P is not passed. Inhibited by a following -P. See -P for more details.
   -c, --clean
       Clean PIDs after dead processes and exit.
   -f, --force-state
       Force the state given via -T. If the current state is already STATE, the state will be flipped twice. Has no effect unless -T is passed. Inhibited by a following --no-force-state.
   --no-force-state
       Inhibit -f. Inhibited by a following -f.
   -h, --help
       Print help message and exit.
   -k KEYCODE, --keycode KEYCODE
       Use KEYCODE to identify the given command instead of using an auto-computed hash. KEYCODE cannot include /.
   -s, --status
       Only query the status of the command; exit with code 0 if state is on, else exit with code 1.
   -T STATE, --toggle STATE
       The given command's state is set to STATE instead of being flipped. If the current state is already STATE, nothing will be done unless -f is passed. STATE can be {on, off}.
   -t TIMEOUT SIGNAL, --timeout TIMEOUT SIGNAL
       Wait TIMEOUT milliseconds and send SIGNAL to the process if not terminated yet. TIMEOUT must be a non-negative integer in milliseconds and SIGNAL must be valid as in kill -L. Note that RT signals are not supported. If multiple -t options are passed, they will be executed in order. If no -t option is passed, a single TIMEOUT=0 and SIGNAL=TERM (or SIGNAL=15) will be used."
}

printusage() {
    printf "Option [%s] is not valid.\n\n" "$1" >&2
    printhelp
}

capturestdin() {
    [ -t 0 ] || {
        stdinfl="$(mktemp)"
        cp -f /dev/stdin "$stdinfl"
    }
}

assertarg() {
    [ -z "$3" ] && {
        printf "[ERROR]: Expected %s argument to %s, exiting.\n" "$2" "$1"
        exit 1
    }
}

parseargs() {
    while [ -n "$1" ]
    do
        if [ "${1%"${1#?}"}" = "-" ]
        then
            if [ "${1%"${1#??}"}" != "--" ]
            then
                sopt="${1#?}"

                while [ -n "$sopt" ]
                do
                    opt="$(printf "%s" "$sopt" | cut -c1)"

                    case "$opt"
                    in
                        a) parseargs --actual;;
                        c) parseargs --clean;;
                        f) parseargs --force-state;;
                        h) parseargs --help;;
                        k) shift; parseargs --keycode "$1";;
                        s) parseargs --status;;
                        T) shift; parseargs --toggle "$1";;
                        t) shift; parseargs --timeout "$1" "$2"; shift;;
                        *) printusage "-$opt"; exit 0;;
                    esac

                    sopt="${sopt#?}"
                done
            else
                opt="${1#??}"
                
                case "$opt"
                in
                    actual         ) actual="1";;
                    no-actual      ) actual="0";;
                    clean          ) willclean="1";;
                    force-state    ) forcestate="1";;
                    no-force-state ) forcestate="0";;
                    help           ) printhelp; exit 0;;
                    keycode        ) shift; assertarg "--keycode" "KEYCODE" "$1"; keycode="$1";;
                    status         ) status="1";;
                    toggle         ) shift; assertarg "--toggle" "STATE" "$1"; state="$1";;
                    timeout        ) shift; assertarg "--timeout" "TIMEOUT" "$1"; assertarg "--timeout" "SIGNAL" "$2"; timeouts="$timeouts$1
"; signals="$signals$2
"; shift;;
                    ""             ) shift; break;;
                    *              ) printusage "--$opt"; exit 0;;
                esac
            fi
        else
            cmd="$cmd '$1'"
        fi

        shift
    done

    for i
    do
        cmd="$cmd '$i'"
    done
}

logerr() {
    printf "[ERROR]: %s\n" "$@"
}

logerrq() {
    logerr "$@"
    exit 1
}

logargcaseerrq() {
    argname="$(printf "%s" "$1" | PERLIO=:utf8 perl -pe '$_=uc')"
    shift
    logerrq "$argname must be one of {$(printf "%s, " "$@" | sed 's/, $//')}."
}

validargcase() {
    arg="$1"
    argname="$2"
    shift 2
    [ -z "$arg" ] || {
        for i
        do
            [ "$arg" = "$i" ] && return 0
        done
        logargcaseerrq "$argname" "$@"
    }
}

validargs() {
    [ -z "$cmd" ] && [ "$willclean" != "1" ] && {
        if [ "$state" = "on" ] || [ -z "$keycode" ]
        then
            logerrq "Command cannot be empty."
        fi
    }
    validargcase "$state" "state" "on" "off"
    [ -n "$timeouts" ] && printf "%s\n" "$timeouts" | grep -q '[^0-9]' && logerrq "TIMEOUT is invalid. See $execname -h for details."
    [ -n "$signals" ] && printf "%s\n" "$signals" | grep -Evxq 'HUP|INT|QUIT|ILL|TRAP|ABRT|IOT|BUS|FPE|KILL|USR1|SEGV|USR2|PIPE|ALRM|TERM|STKFLT|CHLD|CLD|CONT|STOP|TSTP|TTIN|TTOU|URG|XCPU|XFSZ|VTALRM|PROF|WINCH|IO|POLL|PWR|SYS|(3[01]|[12][0-9]|[1-9])' && logerrq "SIGNAL is invalid. See kill -L for valid signals. Note that RT signals are not supported."
    contains "$keycode" "/" && logerrq "KEYCODE cannot contain /."
}

processargs() {
    [ -z "$keycode" ] && keycode="$(printf "%s" "$cmd" | sha512sum | awk '{print $1}' | tr -d '\n')"

    if [ -z "$timeouts" ]
    then
        timeouts="0"
        signals="TERM"
    fi

    while IFS= read -r timeout <&3 && IFS= read -r signal <&4
    do
        killargs="$killargs --timeout $timeout $signal"
    done 3<<EOF1 4<<EOF2
$timeouts
EOF1
$signals
EOF2
}

runcmd() {
    if [ -z "$stdinfl" ]
    then
        eval "( $cmd ) &"
    else
        eval "( $cmd ) < '$stdinfl' &"
    fi
    printf "%s" "$!" > "$keyfl"
}

stopcmd() {
    # shellcheck disable=SC2086
    { ps --ppid "$pid" | tail -n +2 | awk '{print $1}'; printf "%s\n" "$pid"; } | sort -n | uniq | xargs -r kill $killargs "$pid" 2> /dev/null
    kill -0 "$pid" 2> /dev/null || rm -f "$keyfl" 2> /dev/null
}

main() {
    flsdir="$(getloc tglapp)" || logerrq "No $execname location is set." # Recommended to be a subdirectory of a directory mounted on volatile memory, such as /tmp/somedir as /tmp is volatile on most systems.

    keyfl="$flsdir/$keycode"

    [ "$status" = "1" ] && {
        [ -f "$keyfl" ] && pid="$(cat "$keyfl")" && kill -s 0 "$pid" 2> /dev/null && exit 0
        exit 1
    }

    [ "$willclean" = "1" ] && {
        [ -z "$flsdir" ] && logerrq "A fatal error occurred, panicking instead of cleaning." # Ensure we're not wiping root.
        for i in "$flsdir"/*
        do
            pid="$(cat "$i")"
            kill -s 0 "$pid" 2> /dev/null || rm -f "$i"
        done
        exit 0
    }

    if [ -f "$keyfl" ]
    then
        pid="$(cat "$keyfl")"
        if kill -s 0 "$pid" 2> /dev/null
        then
            if [ -z "$state" ] || [ "$state" = "off" ]
            then
                stopcmd
            elif [ "$forcestate" = "1" ]
            then
                stopcmd
                runcmd
                wait
            fi
        else
            if [ -z "$state" ] || [ "$state" = "off" ]
            then
                rm -f "$keyfl"
                [ "$actual" = "1" ] && {
                    runcmd
                    wait
                }
            elif [ "$state" = "on" ]
            then
                runcmd
                wait
            fi
        fi
    else
        if [ -z "$state" ] || [ "$state" = "on" ]
        then
            runcmd
            wait
        elif [ "$forcestate" = "1" ]
        then
            runcmd
            pid="$(cat "$keyfl")"
            stopcmd
        fi
    fi
}

clean() {
    [ -f "$stdinfl" ] && rm -f "$stdinfl"
    [ -f "$keyfl" ] && rm -f "$keyfl"
}

capturestdin
parseargs "$@"
validargs
processargs
trap 'clean' INT
main
clean
