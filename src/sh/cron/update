#!/usr/bin/env sh
# Pull updates from git and compile programs. Used list file is the file coded upabl.

. evalverbose.sh

cleanexit() {
    lck -uq -- update
    exit 0
}

log() {
    printf "[update]: %s\n" "$1"
}

eval "$(getpath -fe -- upabl lst 1 "[ERROR]: getpath -f -- failed, aborting.")"

for i; do
    if [ "$i" = "-u" ] || [ "$i" = "--unlock" ]; then
        cleanexit "$0"
    fi
done

log "Acquiring lock."

trap 'cleanexit "$0"' INT TERM HUP QUIT

lck -rq -- update

log "Reading updateables."

errcount=0
cmdcount=0

# shellcheck disable=SC2154
while IFS= read -r i; do
    [ "$(printf "%s" "$i" | sed -E 's/^\s*//' | cut -c1)" = "#" ] && continue

    loc="$(printf "%s" "$i" | awk -F "" '{print $1}')"
    cmd="$(printf "%s" "$i" | awk -F "" '{print $2}')"

    log "Parsing $loc."

    cd "$(getpath -ds -- "$loc")" || {
        log "Could not find location $loc."
        continue
    }

    log "Pulling updates."
    if [ "$(git pull | tail -n 1 | grep --color=never -o " up to date.$")" = " up to date." ]; then
        log "Already up to date."
    else
        eval "( $cmd )" || {
            log "Failed to update $loc."
            : $((err += 1))
        }
    fi

    : $((cmdcount += 1))
done < "$lst"

lck -uq -- update

log "Done."

exitcode=0
[ "$errcount" -ne 0 ] && : $((exitcode = cmdcount - errcount + 1))

exit "$exitcode"
