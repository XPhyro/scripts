#!/usr/bin/env sh

# shellcheck disable=SC2154

. std.sh

. basedir.sh
. execinfo.sh
. io.sh

execs="'bgs', 'gsettings', 'hsetroot', 'xwallpaper' or 'mpv'"

unset optdepth optdir optcount opttime
defaultdepth="$(printf "%s\n" "2^31 - 1" | bc)"
optgamemode=0
gamemodetime=30
optorient=0
optpersist=0
while getopts "D:d:g:hn:opt:x:" OPT; do
    case "$OPT" in
        D)
            [ "$OPTARG" -ge 1 ] || std_logerrq "DEPTH must be a valid positive integer."
            optdepth="$OPTARG"
            ;;
        d)
            [ -d "$OPTARG" ] || std_logerrq "DIR must be a valid directory."
            optdir="$OPTARG"
            ;;
        g) optgamemode=1;;
        h)
            printf "%s" \
"$execname [OPTION...]
   -D DEPTH   Search for wallpapers at at most DEPTH depth. Default is
              $defaultdepth.
   -d DIR     Use DIR as wallpaper directory. Default is \`getpath -ds --
              wa\`/{image,video} depending on the selected executable.
   -g         Do not change wallpaper if there is currently an application that
              uses libgamemodeauto. This is the case if running a game with
              \`gamemoderun\`. Ignored if -x is not gsettings. Applications are
              checked every $gamemodetime seconds.
   -h         Print help message and exit.
   -n COUNT   Count of unique wallpapers to dispatch. Default is your display
              count as of initialisation. Ignored if -x is 'gsettings' or
              'hsetroot'.
   -o         Match images and monitors according to orientation. Ignored if -x
              is not 'gsettings'.
   -p         Make GNOME wallpapers persistent
   -t TIME    Wait TIME between wallpaper changes. TIME must be a valid
              sleep(1) time. Default is 15m.
   -x EXEC    Executable to use. Can be one of $execs. If not given, the
              aforementioned executables are searched for in the given order
              and the first installed one is used. At least one must be
              installed.
"
            exit 0
            ;;
        n)
            [ "$OPTARG" -gt 0 ] || std_logerrq "COUNT must be a valid positive integer."
            optcount="$OPTARG"
            ;;
        o) optorient=1;;
        p) optpersist=1;;
        t) opttime="$OPTARG";;
        x) optexec="$OPTARG";;
        *) printf "Invalid option given: %s\n" "$OPT"; exit 1;;
    esac
done
shift "$((OPTIND - 1))"

[ -z "$optdepth" ] && optdepth="$defaultdepth"
[ -z "$opttime" ] && opttime=15m
[ -z "$optcount" ] && optcount="$(xrandr --listactivemonitors | head -n 1 | cut -d' ' -f2)"
[ -z "$optexec" ] && {
    optexec="$(fmapsb bgs=bgs gsettings=gsettings hsetroot=hsetroot xwallpaper=xwallpaper mpv=mpv)"
    [ -z "$optexec" ] \
        && std_logerrq "At least one of $execs must be installed."
}
[ -z "$optdir" ] && {
    eval "$(getpath -dse -- wa optdir 1 "getpath -ds -- failed.")"
    optdir="$optdir/$(printf "%s\n" "$optexec" | DEF=image fmaps mpv=video)"
}

export optdir
export optgamemode
export optpersist
export opttime

export gamemodetime

case "$optexec" in
    bgs)
        find "$optdir/" -mindepth 1 -maxdepth "$optdepth" \( -type f -o -type l \) -not -path "*/*ignore*/*" -print0 \
            | xargs -r0 -n 20 -P 64 file -00 -L --mime-type -- \
            | xargs -r0 -n 2 sh -c 'prefixes "$2" "image/" && printf "%s\0" "$1"' -- \
            | shufr -U0 \
            | xargs -r0 -n "$optcount" sh -c '
                . std.sh

                bgs -z "$@"

                printf "%s\0" "$@" | xargs -r0 realpath --relative-to "$optdir" > "$optdir/.current-wallpapers"
                sleep "$opttime"
            ' --
        ;;
    gsettings)
        prev_wallpaper_mode="$(gsettings get org.gnome.desktop.background picture-options)"
        prev_wallpaper="$(gsettings get org.gnome.desktop.background picture-uri)"
        prev_wallpaper_dark="$(gsettings get org.gnome.desktop.background picture-uri-dark)"

        trap=""

        if [ "$optpersist" -eq 0 ]; then
            output_path_1="$(mktemp --suffix=.jpg)"
            output_path_2="$(mktemp --suffix=.jpg)"

            trap='
                gsettings set org.gnome.desktop.background picture-options "$prev_wallpaper_mode"
                gsettings set org.gnome.desktop.background picture-uri "$prev_wallpaper"
                gsettings set org.gnome.desktop.background picture-uri-dark "$prev_wallpaper_dark"
                rm -f -- "$output_path_1" "$output_path_2"
            '
            trap "$trap" EXIT INT TERM QUIT
        else
            output_path_1="$std_cache_home/wallpaper-1.jpg"
            output_path_2="$std_cache_home/wallpaper-2.jpg"
        fi

        [ "$prev_wallpaper_mode" != "spanned" ] \
            && gsettings set org.gnome.desktop.background picture-options spanned

        if [ "$optorient" -eq 0 ]; then
            moncount="$(xrandr --listactivemonitors | head -n 1 | cut -d' ' -f2)"
            find "$optdir/" -mindepth 1 -maxdepth "$optdepth" \( -type f -o -type l \) -not -path "*/*ignore*/*" -print0 \
                | xargs -r0 -n 20 -P 64 file -00 -L --mime-type -- \
                | xargs -r0 -n 2 sh -c 'prefixes "$2" "image/" && printf "%s\0" "$1"' -- \
                | shufr -U0 -P "$moncount" \
                | output_path_1="$output_path_1" output_path_2="$output_path_2" xargs -r0 -n "$((moncount + 1))" sh -c '
                    . std.sh

                    index="$1"
                    shift

                    if [ "$((index % 2))" -eq 0 ]; then
                        output_path="$output_path_1"
                    else
                        output_path="$output_path_2"
                    fi

                    {
                        printf "%s\0" "$output_path"
                        while IFS= read -r image <&3 && IFS= read -r geometry <&4; do
                            printf "%s\0" "$image" "$geometry"
                        done 3<<EOF3 4<<EOF4
$(printf "%s\n" "$@")
EOF3
$(xrandr | grep -Fw "connected" | grep -Eo "[0-9]+x[0-9]+\+[0-9]+\+[0-9]+")
EOF4
                    } | xargs -r0 span-images

                    [ "$optgamemode" -ne 0 ] && {
                        while [ -n "$(gamemodelist 2> /dev/null)" ]; do
                            sleep "$gamemodetime"
                        done
                    }

                    gsettings set org.gnome.desktop.background picture-uri "file:///$output_path"
                    gsettings set org.gnome.desktop.background picture-uri-dark "file:///$output_path"

                    printf "%s\0" "$@" | xargs -r0 realpath --relative-to "$optdir" > "$optdir/.current-wallpapers"
                    sleep "$opttime"
                ' --
        else
            all_images="$(mktemp)"
            portrait_images="$(mktemp)"
            landscape_images="$(mktemp)"
            portrait_stack="$(mktemp)"
            landscape_stack="$(mktemp)"
            buf="$(mktemp)"

            trap="$trap
            "'rm -f -- "$all_images" "$portrait_images" "$landscape_images" "$portrait_stack" "$landscape_stack"'
            trap "$trap" EXIT INT TERM QUIT

            find "$optdir/" -mindepth 1 -maxdepth "$optdepth" \( -type f -o -type l \) -not -path "*/*ignore*/*" -print0 \
                | xargs -r0 -n 20 -P 64 file -00 -L --mime-type -- \
                | xargs -r0 -n 2 sh -c 'prefixes "$2" "image/" && printf "%s\0" "$1"' -- \
                | sort -z > "$all_images"

            xargs -r0 -n 1 -P 64 sh -c '
                . std.sh
                . image.sh

                image="$1"

                case "$(std_get_image_aspect "$image")" in
                    0.*|.*) printf "%s\0" "$image";;
                esac
            ' -- < "$all_images" | sort -z > "$portrait_images"

            comm -z -23 "$all_images" "$portrait_images" > "$landscape_images"

            monitors="$(xrandr | grep -Fw "connected" | grep -Eo "[0-9]+x[0-9]+\+[0-9]+\+[0-9]+")"

            portrait_monitors="$(printf "%s\n" "$monitors" | awk -F 'x' '$2 > $1 {print}')"
            landscape_monitors="$(printf "%s\n" "$monitors" | awk -F 'x' '$1 > $2 {print}')"

            portrait_monitor_count="$(printf "%s\n" "$portrait_monitors" | wc -l)"
            landscape_monitor_count="$(printf "%s\n" "$landscape_monitors" | wc -l)"

            [ "$portrait_monitor_count" -ne 0 ] && [ "$(wc -c < "$portrait_images")" -eq 0 ] \
                && std_logerrq "portrait monitors are present but no portrait images were found"
            [ "$landscape_monitor_count" -ne 0 ] && [ "$(wc -c < "$landscape_images")" -eq 0 ] \
                && std_logerrq "landscape monitors are present but no landscape images were found"

            index=0
            while :; do
                while [ "$(tr '\0' '\n' < "$portrait_stack" | wc -l)" -lt "$portrait_monitor_count" ]; do
                    shuf -z < "$portrait_images" >> "$portrait_stack"
                done

                while [ "$(tr '\0' '\n' < "$landscape_stack" | wc -l)" -lt "$landscape_monitor_count" ]; do
                    shuf -z < "$landscape_images" >> "$landscape_stack"
                done

                if [ "$((index % 2))" -eq 0 ]; then
                    output_path="$output_path_1"
                else
                    output_path="$output_path_2"
                fi

                {
                    printf "%s\0" "$output_path"
                    printf "%s\n" "$portrait_monitors" | while IFS= read -r geometry; do
                        head -z -n 1 -- "$portrait_stack" | tee -a -- "$buf"
                        tail -z -n +2 -- "$portrait_stack" | sponge -- "$portrait_stack"
                        printf "%s\0" "$geometry"
                    done
                    printf "%s\n" "$landscape_monitors" | while IFS= read -r geometry; do
                        head -z -n 1 -- "$landscape_stack" | tee -a -- "$buf"
                        tail -z -n +2 -- "$landscape_stack" | sponge -- "$landscape_stack"
                        printf "%s\0" "$geometry"
                    done
                } | xargs -r0 span-images

                while [ -n "$(gamemodelist 2> /dev/null)" ]; do
                    sleep "$gamemodetime"
                done

                gsettings set org.gnome.desktop.background picture-uri "file:///$output_path"
                gsettings set org.gnome.desktop.background picture-uri-dark "file:///$output_path"

                xargs -r0 realpath --relative-to "$optdir" < "$buf" > "$optdir/.current-wallpapers"
                truncate -s 0 -- "$buf"

                sleep "$opttime"
                : "$((index += 1))"
            done
        fi
        ;;
    hsetroot)
        find "$optdir/" -mindepth 1 -maxdepth "$optdepth" \( -type f -o -type l \) -not -path "*/*ignore*/*" -print0 \
            | xargs -r0 -n 20 -P 64 file -00 -L --mime-type -- \
            | xargs -r0 -n 2 sh -c 'prefixes "$2" "image/" && printf "%s\0" "$1"' -- \
            | shufr -U0 \
            | xargs -r0 -n 1 sh -c '
                . std.sh

                hsetroot -cover "$1"

                printf "%s\0" "$@" | xargs -r0 realpath --relative-to "$optdir" > "$optdir/.current-wallpapers"
                sleep "$opttime"
            ' --
        ;;
    xwallpaper)
        find "$optdir/" -mindepth 1 -maxdepth "$optdepth" \( -type f -o -type l \) -not -path "*/*ignore*/*" -print0 \
            | xargs -r0 -n 20 -P 64 file -00 -L --mime-type -- \
            | xargs -r0 -n 2 sh -c 'prefixes "$2" "image/" && printf "%s\0" "$1"' -- \
            | shufr -U0 \
            | xargs -r0 -n "$optcount" sh -c '
                . std.sh

                while IFS= read -r mon <&3 && IFS= read -r fl <&4; do
                    xwallpaper --output "$mon" --zoom "$fl" &
                done 3<<EOF3 4<<EOF4
$(xrandr | grep -Fw "connected" | cut -d" " -f1)
EOF3
$(printf "%s\n" "$@")
EOF4
                printf "%s\0" "$@" | xargs -r0 realpath --relative-to "$optdir" > "$optdir/.current-wallpapers"
                sleep "$opttime"
            ' --
        ;;
    mpv)
        find "$optdir/" -mindepth 1 -maxdepth "$optdepth" \( -type f -o -type l \) -not -path "*/*ignore*/*" -print0 \
            | xargs -r0 -n 20 -P 64 file -00 -L --mime-type -- \
            | xargs -r0 -n 2 sh -c 'prefixes "$2" "video/" && printf "%s\0" "$1"' -- \
            | shufr -U0 \
            | xargs -r0 -n "$optcount" sh -c '
                . std.sh

                clean() {
                    printf "%s\n" "$pids" | while IFS= read -r pid; do
                        kill "$pid"
                    done
                }

                if [ -n "$WALLPAPER_XWINWRAP_ARGS_CMD" ]; then
                    xwinwrapargs="$(eval "$WALLPAPER_XWINWRAP_ARGS_CMD")"
                else
                    xwinwrapargs="-st -sp -ni -s -nf -b -un -argb -fdt"
                fi

                if [ -n "$WALLPAPER_MPV_ARGS_CMD" ]; then
                    mpvargs="$(eval "$WALLPAPER_MPV_ARGS_CMD")"
                else
                    mpvargs="--vo=vaapi"
                fi

                pids="$(while IFS= read -r geom <&3 && IFS= read -r fl <&4; do
                    
                    xwinwrap $xwinwrapargs -g "$geom" -sub WID -- \
                        prime-run mpv \
                            --loop \
                            --no-config \
                            --no-input-terminal \
                            --no-input-cursor \
                            --no-osc \
                            --no-osd-bar \
                            --no-input-default-bindings \
                            --cursor-autohide=no \
                            --mute=yes \
                            --stop-screensaver=no \
                            --panscan=1 \
                            --wid=WID \
                            $mpvargs \
                            -- "$fl" > /dev/null 2> /dev/null &
                    printf "%s\n" "$!"
                done 3<<EOF3 4<<EOF4
$(xrandr | sed -"s/[a-zA-Z0-9_-]\+ connected \(primary \)\?\([0-9]\+x[0-9]\++[0-9]\++[0-9]\+\) \([a-z]\+ \)\?(.*$/\2/p")
EOF3
$(printf "%s\n" @")
EOF4
)"
                printf "%s\0" "$@" | xargs -r0 realpath --relative-to "$optdir" > "$optdir/.current-wallpapers"
                trap clean INT TERM EXIT QUIT
                sleep "$opttime"
                clean
            ' --
        ;;
esac
