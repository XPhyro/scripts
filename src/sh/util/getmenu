#!/usr/bin/env sh

eval "$(evalverbose)"

execname="${0##*/}"

printhelp() {
    printf "%s" \
"$execname [OPTION...]
   -h, --help
       Print help message and exit.
   -i, --case-insensitive
       Case insensitive matching.
   --case-sensitive, --no-case-insensitive
       Revert -i.
   -l COUNT, --lines COUNT
       Show at max COUNT lines at a time.
   -M, --multi-select
       Enable multi-select mode.
   --no-multi-select
       Revert -M.
   -m METHOD, --method METHOD
       Set the matching method to use to METHOD. METHOD can be one of: normal, regex, glob, fuzzy, prefix.
   -p PROMPT, --prompt PROMPT
       Set the prompt to PROMPT.
"
}

assertarg() {
    [ -z "$3" ] && {
        printf "%s: expected %s argument to %s\n" "$execname" "$2" "$1"
        exit 1
    }
}

caseopt() {
    case "$MENU" in
        "rofi -dmenu" | "rofi"*" rofi -dmenu"* ) eval "$1='$2'";;
        "dmenu"                                ) eval "$1='$3'";;
        *                                      ) ;;
    esac
}

parseargs() {
    [ -z "$MENU" ] && MENU="$(fmapsb rofi='rofi -dmenu' dmenu='dmenu')"
    while [ -n "$1" ]; do
        if [ "${1%"${1#?}"}" = "-" ]; then
            if [ "${1%"${1#??}"}" != "--" ]; then
                sopt="${1#?}"

                while [ -n "$sopt" ]; do
                    opt="${sopt%"${sopt#?}"}"

                    case "$opt" in
                        h) parseargs --help;;
                        i) parseargs --case-insensitive;;
                        l) shift; parseargs --lines "$1";;
                        M) parseargs --multi-select;;
                        m) shift; parseargs --method "$1";;
                        p) shift; parseargs --prompt "$1";;
                        *) printusage "-$opt"; exit 0;;
                    esac

                    sopt="${sopt#?}"
                done
            else
                opt="${1#??}"

                case "$opt" in
                    help                ) printhelp; exit 0;;
                    case-insensitive    ) optcase="-i";;
                    no-case-insensitive ) unset optcase;;
                    case-sensitive      ) unset optcase;;
                    lines               ) shift; assertarg "--lines" "COUNT" "$1"; optlines="-l $1";;
                    lines=*             ) optlines="-l ${opt#*=}"; assertarg "--lines" "COUNT" "$1";;
                    multi-select        ) caseopt "optmulti" "-multi-select" "";;
                    no-multi-select     ) unset optmulti;;
                    method              ) shift; assertarg "--method" "METHOD" "$1"; optmethod="$1";;
                    method=*            ) optmethod="${opt#*=}"; assertarg "--method" "METHOD" "$1";;
                    prompt              ) shift; assertarg "--prompt" "prompt" "$1"; optprompt="$1";;
                    prompt=*            ) optprompt="${opt#*=}"; assertarg "--prompt" "prompt" "$1";;
                    ""                  ) shift; break;;
                    *                   ) printusage "--$opt"; exit 0;;
                esac
            fi
        else
            args="$args$1
"
        fi

        shift
    done

    for i; do
        args="$args$i
"
    done
}

unset optcase optmulti method optprompt
eval "parseargs $MENUDEFARGS"
parseargs "$@"
eval "parseargs $MENUARGS"

case "$optmethod" in
    normal ) caseopt "optmethod" "-matching normal" "-F";;
    regex  ) caseopt "optmethod" "-matching regex" "";;
    glob   ) caseopt "optmethod" "-matching glob" "";;
    fuzzy  ) caseopt "optmethod" "-matching fuzzy" "";;
    prefix ) caseopt "optmethod" "-matching prefix" "";;
    ""     ) ;;
    *      ) exit 1;;
esac

[ -n "$optprompt" ] && optprompt="-p $(env printf "%q" "$optprompt")"

# shellcheck disable=SC2154
printf "%s\n" "$MENU $optcase $optmethod $optmulti $optprompt $optlines"
