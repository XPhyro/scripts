#!/usr/bin/env sh
# Compile and show its PDF of a TeX file, then compile it every time it is modified.
# This was written as a more robust alternative to latexmk
# as it seemed to fail and/or get stuck quite a lot.
#
# TODO: Limit CPU usage of $latex_engine. ([cpulimit ... -- $latex_engine ...] did not work)
# TODO: Should child latexstps be spawned for every positional argument?
#       Should only one positional argument be accepted?
#       Should the first positional argument be considered the source file
#       and the rest just be opened along with the source file with the editor?
#       Currently multiple are accepted, but only the first one is considered.

# I apologise for whatever happened here as more features got added.
# You should probably look away.
#
# FIXME: rewrite this mess

. std.sh

execname="${0##*/}"

printhelp() {
    printf "%s\n" \
"$execname [OPTION...] [MAIN_FILE]
   -f, --force
       Force compile even if hash-check succeeds.
   --no-force
       Revert -f.
   -o, --once
       Compile once and exit.
   --no-once
       Revert -o.
   -p, --project
       Watch all TeX files in the current directory or its subdirectories
       recursively. Also watches newly created files after a compile.
       Compilation is still only done against MAIN_FILE.
   --no-project
       Revert -p.
   --shell-escape
       Enable \write18.
   --no-shell-escape
       Revert --shell-escape.
   -h, --help
       Print help message."
}

printusage() {
    printf "Option [%s] is not valid.\n\n" "$1" >&2
    printhelp
}

logerrq() {
    printf "[ERROR]: %s\n" "$1" >&2
    exit 1
}

assertfl() {
    [ -f "$1" ] || logerrq "No such file as $1, exiting."
}

parseargs() {
    while [ -n "$1" ]; do
        if [ "${1%"${1#?}"}" = "-" ]; then
            if [ "${1%"${1#??}"}" != "--" ]; then
                sopt="${1#?}"

                while [ -n "$sopt" ]; do
                    opt="${sopt%"${sopt#?}"}"

                    case "$opt" in
                        f) parseargs --force;;
                        o) parseargs --once;;
                        p) parseargs --project;;
                        h) parseargs --help;;
                        *) printusage "-$opt"; exit 0;;
                    esac

                    sopt="${sopt#?}"
                done
            else
                opt="${1#??}"

                case "$opt" in
                    force            ) optforce="1";;
                    no-force         ) optforce="0";;
                    once             ) optonce="1";;
                    no-once          ) optonce="0";;
                    project          ) optproject="1";;
                    no-project       ) optproject="0";;
                    shell-escape     ) optshellesc="--shell-escape";;
                    no-shell-escape  ) optshellesc="";;
                    help             ) printhelp; exit 0;;
                    ""               ) shift; break;;
                    *                ) printusage "--$opt"; exit 0;;
                esac
            fi
        else
            assertfl "$1.tex"
            fls="$1
$fls"
        fi

        shift
    done

    for i; do
        assertfl "$i.tex"
        fls="$fls$i
"
    done
}

setdefargs() {
    cachedir="${XDG_CACHE_HOME:-"$HOME/.cache"}/latexstp"
    if [ -n "$LATEX_ENGINE" ]; then
        latex_engine="$LATEX_ENGINE"
    elif command -v lualatex > /dev/null 2>&1; then
        latex_engine="lualatex"
    elif command -v xelatex > /dev/null 2>&1; then
        latex_engine="xelatex"
    elif command -v pdflatex > /dev/null 2>&1; then
        latex_engine="pdflatex"
    elif command -v latex > /dev/null 2>&1; then
        latex_engine="latex"
    else
        logerrq "No LaTeX engine found, exiting."
    fi
}

processargs() {
    [ -z "$fls" ] && logerrq "Expected at least one file, exiting."
    srcfl="$(printf "%s\n" "$fls" | head -n 1)"
    export srcfl
    hardlinked "$srcfl" "${srcfl##*/}" || logerrq "Source file must be in the current directory."
    srchashfl="$cachedir$(realpath -- "$srcfl.tex")"
    mkdir -p -- "${srchashfl%/*}" || {
        i="$srchashfl"
        while :; do
            [ -e "$i" ] && {
                rm -rf "$i"
                break
            }

            i="${i%/*}"
            [ "$i" = "$cachedir" ] && logerrq "Could not resolve cache, exiting."
        done
    }
}

clean() {
    cleanaux
    rm -- "$srcfl.pdf" > /dev/null 2>&1
}

printcleanaux() {
    printf "%s\n" "rm -f -- '$srcfl.aux' '$srcfl.bbl' '$srcfl.blg' '$srcfl.lof' '$srcfl.log' '$srcfl.lot' '$srcfl.out' '$srcfl.toc' '$srcfl.bcf' '$srcfl.run.xml' '$srcfl.py' '$srcfl.py.err' '$srcfl.py.out' '$srcfl.pytxcode' 'luadebug.lua' 'latex.py' 'texput.log' '$srcfl.nav' '$srcfl.snm' '$srcfl.equ' '$srcfl.fdb_latexmk' '$srcfl.fls' *.1 *.2 *.log *.mp > /dev/null 2>&1; rm -rf -- 'pythontex-files-$srcfl/' > /dev/null 2>&1"
}

cleanaux() {
    eval "$(printcleanaux)"
}

printcompile() {
    printf "%s\n" "
    if [ '$optproject' != '1' ]; then
        srchash=\"\$(sha512sum -- '$srcfl.tex' | awk '{print \$1}')\"
    else
        srchash=\"\$({ find '.' -mindepth 2 -type f -exec cat '{}' \;; cat -- bibliography.bib '$srcfl.tex'; } | sha512sum | awk '{print \$1}')\"
    fi
    [ '$optforce' != '1' ] && [ -s '$srchashfl' ] && [ -s '$srcfl.pdf' ] && [ \"\$srchash\" = \"\$(cat -- '$srchashfl' 2> /dev/null)\" ] && return 0

    # Adapted from https://tex.stackexchange.com/a/8792/199300
    $latex_engine $optshellesc -interaction=nonstopmode -halt-on-error -- '$srcfl' || {
        cleanaux
        $latex_engine $optshellesc -interaction=nonstopmode -halt-on-error -- '$srcfl' || return 1
    }
    cp -f -- '$srcfl.pdf' '$tmp_pdf'
    [ -f '$srcfl.pytxcode' ] && pythontex -- '$srcfl'
    bibtex -- '$srcfl'
    biber -- '$srcfl'
    makeindex '$srcfl'.idx 2> /dev/null
    # makeindex -s style.gls ...
    $latex_engine $optshellesc -interaction=nonstopmode -halt-on-error -- '$srcfl'
    $latex_engine $optshellesc -interaction=nonstopmode -halt-on-error -- '$srcfl'

    printf '%s\n' \"\$srchash\" > '$srchashfl'
    cp -f -- '$srcfl.pdf' '$tmp_pdf'
    "
}

compile() {
    eval "$(printcompile)"
}

printwait() {
    if [ "$optproject" != '1' ]; then
        printf "%s\n" 'inotifywait -qq -e move_self -- "$srcfl.tex"'
    else
        printf "%s\n" 'inotifywait -qq -- .'
    fi
    printf "%s\n" 'waitfl "$srcfl.tex"'
}

dispatchcompiler() {
    REUSE_TABBED_XID=1 bspwmpad -Hg 725x900 -- sh -c "
    compile() {
        $(printcompile | sed "/^\s*\[ '1' != '1' \] &&/d")
    }
    cleanaux() {
        $(printcleanaux)
    }

    printf '[latexstp]: %s\n' \"Initialised in \$(pwd).\" 'Watching $srcfl.tex.'

    while :; do
        $(printwait)
        compile
    done
    "
}

main() {
    cleanaux
    compile

    [ "$optonce" = "1" ] && {
        cleanaux
        exit 0
    }

    tmp_pdf="$(mktemp -t --suffix=".pdf" -- "$srcfl-XXXXXX")"
    trap 'rm -- "$tmp_pdf"' EXIT TERM INT QUIT
    cp -f -- "$srcfl.pdf" "$tmp_pdf"
    xdg-open "$tmp_pdf" > /dev/null 2>&1 &
    dispatchcompiler > /dev/null 2>&1 &
    xdg-open "$srcfl.tex"
    compile > /dev/null 2>&1
    cleanaux
    kill 0 2>&1
}

setdefargs
parseargs "$@"
processargs
main
