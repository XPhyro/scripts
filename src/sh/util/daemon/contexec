#!/usr/bin/env sh
# Execute a file every time it is modified.

. shellverbose.sh

execname="${0##*/}"

printhelp() {
    printf "%s\n" \
"$execname [OPTION...] [FILES...] -- [FILES...]
   -o, --once
       Exit after the first execution.
   --no-once
       Revert -o.
   -h, --help
       Print help message."
}

printusage() {
    printf "Option [%s] is not valid.\n\n" "$1" >&2
    printhelp
}

logerrq() {
    printf "[ERROR]: %s\n" "$1" >&2
    exit 1
}

capturestdin() {
    [ -t 0 ] && {
        unset stdinfl stdinsep
        return
    }
    stdinfl="$(mktemp)"
    cp -- /dev/stdin "$stdinfl"
    stdinsep="$(getsep "$stdinfl")"
}

assertarg() {
    [ -z "$3" ] && logerrq "Expected $2 argument to $1, exiting."
}

assertfl() {
    [ -f "$1" ] || logerrq "No such file as $1, exiting."
}

parseargs() {
    while [ -n "$1" ]; do
        if [ "${1%"${1#?}"}" = "-" ]; then
            if [ "${1%"${1#??}"}" != "--" ]; then
                sopt="${1#?}"

                while [ -n "$sopt" ]; do
                    opt="${sopt%"${sopt#?}"}"

                    case "$opt" in
                        o) parseargs --once;;
                        h) parseargs --help;;
                        *) printusage "-$opt"; exit 0;;
                    esac

                    sopt="${sopt#?}"
                done
            else
                opt="${1#??}"

                case "$opt" in
                    once     ) optonce="1";;
                    no-once  ) optonce="0";;
                    help     ) printhelp; exit 0;;
                    ""       ) shift; break;;
                    *        ) printusage "--$opt"; exit 0;;
                esac
            fi
        else
            argv="$argv
$1"
        fi

        shift
    done

    for i; do
        argv="$argv
$i"
    done
}

processargs() {
    [ -z "$argv" ] && logerrq "No arguments to execute given."
    [ -z "$stdinfl" ] && {
        stdinfl="$(mktemp)"
        stdinsep="\n"
        printf "%s\n" "$argv" | head -n 1 | tr -d '\n' > "$stdinfl"
        cat "$stdinfl"
    }
}

execute() {
    xargs -d "$stdinsep" inotifywait -qq -e move_self -e moved_from -- < "$stdinfl"
    pid="$(cat -- "$pidfl")"
    kill -s 0 "$pid" 2> /dev/null && {
        env kill -s INT --timeout 1000 TERM --timeout 1000 KILL "$pid" 2> /dev/null \
            || logerrq "Could not kill PID $pid, exiting."
    }
    xargs -d "$stdinsep" waitfl < "$stdinfl" && sleep 0.5
    while kill -s 0 "$pid" 2> /dev/null; do
        sleep 0.1
    done
    kill %% 2> /dev/null
    fillline "â€•"
    printf "\n"
    $argv &
    printf "%s" "$!" > "$pidfl"
}

main() {
    [ "$optonce" = "1" ] && {
        xargs -d "$stdinsep" inotifywait -qq -e move_self -e moved_from -- < "$stdinfl"
        $argv
        exit 0
    }

    pidfl="$(mktemp)"
    while :; do
        execute
    done
}

capturestdin
parseargs "$@"
processargs
trap 'kill -9 0' INT TERM EXIT
main
