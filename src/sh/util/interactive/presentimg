#!/usr/bin/env sh

# shellcheck disable=SC2154

. execinfo.sh
. io.sh
. shellverbose.sh

opttextclr=red
optborderclr=red
optfont=DejaVu-Sans-Book
optgravity="southwest"
unset optoutheight
optoutpath=out_presentimg.png
optpoint=72
optvertical=+
optoffsetx=20
optoffsety=20
unset optoutwidth
optborder=20
while getopts "C:c:f:g:H:hlo:p:vx:y:W:w:" OPT; do
    case "$OPT" in
        C) opttextclr="$OPTARG";;
        c) optborderclr="$OPTARG";;
        f) optfont="$OPTARG";;
        g) optgravity="$OPTARG";;
        H) optoutheight="$OPTARG";;
        h)
            printf "%s" \
"$execname [OPTION...] [IMAGEPATH=LABEL...] -- [IMAGEPATH=LABEL...]
Outline, label and append imamges.

IMAGEPATH must not contain an equals sign (=). LABEL can contain equals signs. At least one of -H or -W must be given.

Options
   -C CLR    text colour. default is red.
   -c CLR    border colour. default is red.
   -f FONT   text font. default is DejaVu-Sans-Book.
   -g GRAV   text gravity. default is southwest.
   -H SIZE   height of the output image. if not given, the height of the input images are preserved.
   -h        display this help and exit
   -l        list all available fonts
   -o PATH   output image path. if not given, out_presentimg.png is used.
   -p SIZE   text point size. default is 72.
   -v        stack images vertically
   -x NUM    offset text in x axis. default is 20. recommended is same as border width.
   -y NUM    offset text in y axis. default is 20. recommended is same as border width.
   -W SIZE   width of the output image. if not given, the width of the input images are preserved.
   -w SIZE   border width. default is 20.

Examples
   $ $execname -H 2160 -o my_horizontally_stacked_image.jpg -- my_vertical_image_1.png=A my_vertical_image_2.webp=B
   $ $execname -W 3840 -v -o my_vertically_stacked_image.jpg -- my_horizontal_image_1.png=\"Image 1\" my_horizontal_image_2.webp=\"Image 2\"
   $ $execname -W 3840 -v -o stacked_frames.png -- my_video_1.mp4=\"First Frame of Video 1\" my_video_2.mov=\"First Frame of Video 2\"
"
            exit 0
            ;;
        l)
            convert -list font | grep "^  Font: " | sed 's/^  Font: //'
            exit "$?"
            ;;
        p) optpoint="$OPTARG";;
        o) optoutpath="$OPTARG";;
        v) optvertical=-;;
        x) optoffsetx="$OPTARG";;
        y) optoffsety="$OPTARG";;
        W) optoutwidth="$OPTARG";;
        w) optborder="$OPTARG";;
        *) printf "Try '%s -h' for more information." "$0"; exit 1;;
    esac
done
shift "$((OPTIND - 1))"

tmpdir="$(mktemp -d)"
trap 'rm -rf -- "$tmpdir"' INT TERM HUP QUIT EXIT
i=1
for img; do
    imgpath="${img%%=*}"
    imglabel="${img#*=}"

    [ -e "$imgpath" ] || std_logerrq "file does not exist: $imgpath"

    ft="$(file --brief --mime-type -- "$imgpath")"

    # generate video thumbnail
    [ "${ft%%/*}" = "video" ] && {
        tmpviddir="$(mktemp -d)"
        vidframe="$(mktemp -p "$tmpviddir" --suffix=.png)"
        ffmpeg -hide_banner -y -i "$imgpath" -vframes 1 -update true -loglevel warning "$vidframe"
        img="$vidframe=$imglabel"
    }

    # normalise size
    convert \
        -resize "${optoutwidth}x${optoutheight}" \
        -- "$imgpath" "$tmpdir/$i.png"

    # add label
    convert \
        -font "$optfont" -pointsize "$optpoint" -fill "$opttextclr" \
        -gravity "$optgravity" -annotate "+$optoffsetx+$optoffsety" "$imglabel" \
        -- "$tmpdir/$i.png" "$tmpdir/$i.png"

    # add border
    convert \
        -bordercolor "$optborderclr" -border "$optborder" \
        -- "$tmpdir/$i.png" "$tmpdir/$i.png"

    : $((i += 1))
done

# merge
{   find "$tmpdir" -mindepth 1 -maxdepth 1 -type f -print0 | sort -nz
    printf "%s\0" "$optoutpath"
} | xargs -r0 convert "${optvertical}append" --

# add border
convert \
    -bordercolor "$optborderclr" -border "$optborder" \
    -- "$optoutpath" "$optoutpath"

# add comment
convert \
    -set "comment" "Image generated via $execname." \
    -- "$optoutpath" "$optoutpath"
