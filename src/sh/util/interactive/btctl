#!/usr/bin/env sh

. std.sh

. io.sh

print_help() {
    cat << EOF
j) power off
k) power on
i) connect
d) disconnect
c) list connected
p) list paired
q) quit
*) help
EOF
}

choose_device() {
    paired_devices="$(bluetoothctl devices Paired)"
    list="$(
        printf "%s\n" "$paired_devices" \
            | awk 'BEGIN {x = 0} {sub(/^Device [0-9A-F:]+ /, ""); printf("%d. ", ++x); print}'
    )"
    count="$(printf "%s\n" "$list" | wc -l)"
    while :; do
        printf "%s\n" \
            "Select a device:" \
            "$list" >&2

        char="$(std_read_char)"
        [ "$char" -ge 0 ] 2> /dev/null && [ "$char" -le "$count" ] 2> /dev/null && {
            printf "%s\n" "$paired_devices" | sed -n "s/^Device\s\+//;s/\s\+.*$//;${char}p"
            break
        }

        printf "%s\n" "Invalid choice." >&2
    done
}

main() {
    case "$1" in
        j) bluetoothctl power off;;
        k) bluetoothctl power on;;
        i) [ -n "$(bluetoothctl devices Paired)" ] \
            && bluetoothctl connect "$(choose_device)";;
        d) [ -n "$(bluetoothctl devices Connected)" ] \
            && bluetoothctl disconnect "$(choose_device)";;
        c) bluetoothctl devices Connected;;
        p) bluetoothctl devices Paired;;
        q|"$(print-eof)") fillline -; exit 0;;
        *) print_help;;
    esac
    fillline -
    printf "\n"
}

fillline -
printf "\n"
print_help
fillline -
printf "\n"
while :; do
    main "$(std_read_char)"
done
