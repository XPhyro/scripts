#!/usr/bin/env sh

. std.sh

PREVIEW='
    file="$(
        printf "%s\n" {} \
            | sed "s/^\s*[0-9]\+\. //"
    )"
    if [ "$file" = "*" ]; then
        printf "%s\n" "Select all files."
    elif [ -d "$file" ]; then
        ls -lA -- "$file"
    else
        bat --color=always --style=header,grid --line-range :500 -- "$file"
    fi
'

fzf() {
    stdin="$(cat)"
    width="$(printf "%s\n" "$available_commands" | wc -l | wc -c)"
    printf "%s\n" "$stdin" \
        | nl -n rn -w "$width" -s ". " \
        | command fzf \
            --no-sort \
            --layout=reverse \
            --height="65%" \
            --preview-window="right:65%" \
            "$@" \
        | sed 's/^\s*[0-9]\+\. //'
}

git_show() {
    git log --color=always --pretty="%h %cs %s" \
        | fzf --preview="printf '%s\n' {} | awk '{print \$2}' | xargs -r -d '\n' -n 1 git show --color=always" > /dev/null
}

git_diff() {
    {
        printf "%s\n" "*"
        git diff --name-only --staged
        git diff --name-only
    } | fzf --preview="
            printf '%s\n' {} | awk '{print \$2}' | xargs -r -d '\n' -n 1 git diff --staged --color=always --
            printf '%s\n' {} | awk '{print \$2}' | xargs -r -d '\n' -n 1 git diff --color=always --
        " > /dev/null
}

# TODO: most functions have the same template, clean them up.
git_add() {
    files="$(
        git diff --name-only
        git ls-files --others --exclude-standard
    )"
    [ -z "$files" ] && return

    selection="$(
        printf "%s\n" "*" "$files" \
            | fzf --multi --preview='
                diff="$(printf "%s\n" {} | awk "{print \$2}" | xargs -r -d "\n" -n 1 git diff --color=always --)"
                if [ -n "$diff" ]; then
                    printf "%s\n" "$diff"
                else
                    printf "%s\n" {} | awk "{print \$2}" | xargs -r -d "\n" -n 1 bat --color=always --style=header,grid --line-range :500 --
                fi
            ' --bind=one:accept
    )"

    [ -z "$selection" ] && return

    printf "%s\n" "$selection" | xargs -r -d '\n' git add --
    git_add
}

git_partial_add() {
    files="$(git diff --name-only)"
    [ -z "$files" ] && return

    selection="$(
        printf "%s\n" "$files" \
            | fzf --multi --preview="
                printf '%s\n' {} | awk '{print \$2}' | xargs -r -d '\n' -n 1 git diff --color=always --
            " --bind=one:accept
    )"

    [ -z "$selection" ] && return

    printf "%s\n" "$selection" | xargs -r -d '\n' -o git add -p --
    git_partial_add
}

git_unstage() {
    files="$(git diff --name-only --staged)"
    [ -z "$files" ] && return

    selection="$(
        printf "%s\n" "$files" \
            | fzf --multi --preview="$PREVIEW" --bind=one:accept
    )"

    [ -z "$selection" ] && return

    printf "%s\n" "$selection" | xargs -r -d '\n' git restore --staged --
    git_unstage
}

git_reset() {
    files="$(git diff --name-only)"
    [ -z "$files" ] && return

    selection="$(
        printf "%s\n" "$files" \
            | fzf --multi --preview="$PREVIEW"
    )"

    [ -z "$selection" ] && return

    printf "%s\n" "$selection" | xargs -r -d '\n' git restore --
    git_reset
}

git_commit() {
    selection="$(
        printf "%s\n" \
            "Custom" \
            "Create" \
        | fzf --multi --preview="unbuffer git status" --bind=one:accept
    )"

    case "$selection" in
        "Custom") git commit;;
        "Create") printf "%s\n" "$(git diff --name-only --staged)" | xargs -r -d '\n' gacma Create;;
    esac
}

git_push() {
    selection="$(
        {
            printf "%s\n" "Normal"
            git status -sb | head -n 1 | grep -Eq '\[.*behind [0-9]+.*\]$' \
                && printf "%s\n" "Force With Lease" "Force"
        } | fzf --select-1 --multi --preview="unbuffer git status" --bind=one:accept
    )"

    case "$selection" in
        "Normal") git push;;
        "Force With Lease") git push --force-with-lease;;
        "Force") git push -f;;
    esac
}

git_fetch() {
    git fetch
}

git_pull() {
    git pull
}

while :; do
    available_commands="$(
        printf "%s\n" "[S]how"
        [ -n "$(
            git diff --name-only --staged
            git diff --name-only
        )" ] \
            && printf "%s\n" "[D]iff"
        [ -n "$(
            git ls-files --others --exclude-standard
            git diff --name-only
        )" ] \
            && printf "%s\n" "[A]dd"
        [ -n "$(git diff --name-only)" ] \
            && printf "%s\n" "partia[L] add"
        [ -n "$(git diff --name-only --staged)" ] \
            && printf "%s\n" "un[S]tage"
        [ -n "$(git diff --name-only)" ] \
            && printf "%s\n" "[R]eset"
        [ -n "$(git diff --name-only --staged)" ] \
            && printf "%s\n" "[C]ommit"
        git status -sb | head -n 1 | grep -Eq '\[(ahead|behind) [0-9](, .*)?+\]$' \
            && printf "%s\n" "[P]ush"
        printf "%s\n" \
            "fetc[H]" \
            "p[U]ll" \
            "re[F]resh" \
            "[Q]uit"
    )"

    command="$(printf "%s\n" "$available_commands" | fzf --header="Select Git Command" --preview="unbuffer git status" --bind=one:accept)"

    case "$command" in
        "[S]how")          git_show;;
        "[D]iff")          git_diff;;
        "[A]dd")           git_add;;
        "partia[L] add")   git_partial_add;;
        "un[S]tage")       git_unstage;;
        "[R]eset")         git_reset;;
        "[C]ommit")        git_commit;;
        "[P]ush")          git_push;;
        "fetc[H]")         git_fetch;;
        "p[U]ll")          git_pull;;
        "re[F]resh")       continue;;
        ""|"[Q]uit")       break;;
        *)             continue;;
    esac
done
