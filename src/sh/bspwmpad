#!/usr/bin/env sh

execname="${0##*/}"

printhelp() {
    printf "%s\n" \
"$execname [OPTION...] -- [COMMAND...]
   -d PATH, --directory PATH
       Execute the command after changing the working directory to PATH.
   -g GEOMETRY, --geometry GEOMETRY
       Define the geometry that st should use. See st(1) for details.
   -n NUMBER, --number NUMBER
       Use pad number NUMBER. Number can be an integer between 0 and 9. If 0 is passed, the given command is ignored and statistics about the other pads are shown.
   -t TITLE, --title TITLE
       Title of the st instance. If not given, 'bspwmpad #NUMBER' will be used.
   -h, --help
       Print help message and exit."
}

printusage() {
    printf "Option [%s] is not valid.\n\n" "$1" >&2
    printhelp
}

logerrq() {
    printf "[ERROR]: %s\n" "$1" >&2
    exit 1
}

assertarg() {
    [ -z "$3" ] && logerrq "Expected $2 argument to $1, exiting."
}

preprocessargs() {
    argcmdcount=0
    for i; do
        : $((argcmdcount += 1))
        [ "$i" = "--" ] && break
    done
}

parseargs() {
    while [ -n "$1" ]; do
        if [ "${1%"${1#?}"}" = "-" ]; then
            if  [ "${1%"${1#??}"}" != "--" ]; then
                sopt="${1#?}"

                while [ -n "$sopt" ]; do
                    opt="${sopt%"${sopt#?}"}"

                    case "$opt" in
                        d) shift; parseargs --directory "$1";;
                        g) shift; parseargs --geometry "$1";;
                        n) shift; parseargs --number "$1";;
                        t) shift; parseargs --title "$1";;
                        h) parseargs --help;;
                        *) printusage "$1"; exit 0;;
                    esac

                    sopt="${sopt#?}"
                done
            else
                opt="${1#??}"
                
                case "$opt" in
                    directory   ) shift; assertarg "-d, --directory" "PATH" "$1"; optdirectory="-d $1";;
                    directory=* ) optdirectory="-d ${opt#*=}"; assertarg "-d, --directory" "PATH" "$optdirectory";;
                    geometry    ) shift; assertarg "-g, --geometry" "GEOMETRY" "$1"; optgeometry="-g $1";;
                    geometry=*  ) optgeometry="-g ${opt#*=}"; assertarg "-g, --geometry" "GEOMETRY" "$optgeometry";;
                    number      ) shift; assertarg "-n, --number" "NUMBER" "$1"; optnumber="$1";;
                    number=*    ) optnumber="${opt#*=}"; assertarg "-n, --number" "NUMBER" "$optnumber";;
                    title       ) shift; assertarg "-t, --title" "TITLE" "$1"; opttitle="$1";;
                    title=*     ) opttitle="${opt#*=}"; assertarg "-t, --title" "TITLE" "$opttitle";;
                    help        ) printhelp; exit 0;;
                    ""          ) return 0;;
                    *           ) printusage "$1"; exit 0;;
                esac
            fi
        else
            printusage "$1"
            exit 0
        fi

        shift
    done
}

processargs() {
    [ -n "$optnumber" ] && { [ "${#optnumber}" -ne 1 ] || [ -z "$(printf "%s" "$optnumber" | tr -dc '0-9')" ]; } && logerrq "Invalid NUMBER passed, exiting."
}

main() {
    lckdir="$(getdir bspwmpadlck)" || {
        printf "[ERROR]: getdir failed, aborting.\n"
        exit 1
    }

    [ -n "$optnumber" ] && ids="$(xdotool search --limit 0 --classname "bspwmpad$optnumber")" && {
        fd="$(bspc query -D -d focused)"
        printf "%s\n" "$ids" | while IFS= read -r i; do
            if [ "$(bspc query -D -n "$i")" = "$fd" ]; then
                bspc node "$i" --flag hidden -f
            else
                bspc node "$i" -d "$fd" --flag hidden=false -f
            fi
        done
        exit 0
    }

    lck="$( 
        printf "%s\n" "${optnumber:-"$(seq 1 9)"}" | while IFS= read -r i; do
            mkdir -- "$lckdir/$i" 2> /dev/null && {
                printf "%s" "$i"
                break
            }
        done
    )"

    [ -z "$lck" ] && {
        notify-send -t 2000 "bspwmpad" "Waiting for lock acquisition..." &

        lck="$(
            while true; do
                i="$(inotifywait -q -e "delete" --format "%f" -- "$lckdir")"
                [ -n "$optnumber" ] && [ "$i" != "$optnumber" ] && continue
                mkdir -- "$lckdir/$i" 2> /dev/null && {
                    printf "%s" "$i"
                    break
                }
            done
        )"
    }

    shift "$argcmdcount"

    # shellcheck disable=SC2086
    st $optdirectory $optgeometry -n "bspwmpad$lck" -t "${opttitle:-"bspwmpad #$lck"}" -e bspwmpadinit "$lckdir" "$lck" "$@" &
    until ids="$(xdotool search --classname "bspwmpad$lck")"; do
        sleep 0.1
    done
    printf "%s\n" "$ids" | while IFS= read -r i; do
        bspc node "$i" --flag hidden -f
    done
    wait
}

clean() {
    rm -rf -- "${lckdir:?}/${lck:?}"
}

preprocessargs "$@"
parseargs "$@"
processargs
trap clean TERM
main "$@"
clean
