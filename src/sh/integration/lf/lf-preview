#!/usr/bin/env sh

# TODO: svg preview does not work, fix.
# TODO: scope.sh does not handle on-demand files such as /proc/*. create a
#       scope script with support for these, a simpler API and without image
#       support (which is handled here).
# TODO: add support for CBR files.

preview_image() {
    if [ -n "$DISPLAY" ]; then
        if [ -n "$KITTY_PID" ]; then
            kitty +kitten icat \
                --transfer-mode file \
                --stdin no \
                --place ${2}x${3}@${4}x${5} ${1} < /dev/null > /dev/tty
            exit 1
        elif [ -n "$LF_PREVIEW_USE_SIXEL" ] && [ "$LF_PREVIEW_USE_SIXEL" -ne 0 ]; then
            chafa -f sixel -s "$(($2 - 2))x$3" -- "$1"
            exit 0
        elif { [ -z "$LF_PREVIEW_USE_UEBERZUG" ] || [ "$LF_PREVIEW_USE_UEBERZUG" -ne 0 ]; } \
            && command -v ueberzug > /dev/null 2>&1; then
            jq -cn \
                --arg action add \
                --arg identifier PREVIEW \
                --arg x "$4" \
                --arg y "$5" \
                --arg width "$(($2 - 1))" \
                --arg height "$(($3 - 1))" \
                --arg scaler fit_contain \
                --arg path "$1" \
                '{
                    action: $action,
                    identifier: $identifier,
                    x: $x,
                    y: $y,
                    width: $width,
                    height: $height,
                    scaler: $scaler,
                    path: $path,
                }' > "$UEBERZUG_FIFO"
            exit 1
        else
            chafa -s "$(($2 - 2))x$3" -- "$1"
            exit 0
        fi
    else
        chafa -s "$(($2 - 2))x$3" -- "$1"
        exit 0
    fi
}

preview_pdf() {
    [ -f "$thumbfl.jpg" ] || pdftoppm -jpeg -f 1 -singlefile "$1" "$thumbfl"
    preview_image "$thumbfl.jpg" "$2" "$3" "$4" "$5"
}

scope() {
    # FIXME: `scope` does not clean after temporary files when timed out.
    #        maybe replace scope with a custom script?
    timeout 5 \
        "${XDG_CONFIG_HOME:-$HOME/.config}/ranger/scope.sh" \
            "$(realpath -P -- "$1")" \
            "$2" \
            "" \
            "$thumbfl" \
            "True"
}

main() {
    [ -d "$XDG_CACHE_HOME/lf/preview.lck" ] && {
        scope "$@"
        exit 1
    }

    realfl="$(realpath -P -- "$1")"
    thumbdir="${XDG_CACHE_HOME:-"$HOME/.cache"}/lf/thumbnails"
    thumbfl="$thumbdir/$(stat --printf '%n\0%i\0%F\0%s\0%W\0%Y' -- "$realfl" | sha512sum | cut -d' ' -f1)"

    mime_type="$(file --mime-type --brief -- "$(realpath -P -- "$1")")"
    case "$mime_type" in
        application/octet-stream)
            case "$1" in
                *.pdf) preview_pdf "$@";;
                *) scope "$@";;
            esac
            ;;
        application/pdf)
            preview_pdf "$@"
            ;;
        application/epub+zip)
            [ -f "$thumbfl" ] || epub-thumbnailer "$1" "$thumbfl" 1024
            preview_image "$thumbfl" "$2" "$3" "$4" "$5"
            ;;
        video/*|image/gif)
            if [ -n "$KITTY_PID" ]; then
                [ "$mime_type" = "image/gif" ] && {
                    preview_image "$1" "$2" "$3" "$4" "$5"
                    return
                }

                ext=gif
                [ -f "$thumbfl.$ext" ] || {
                    i=0
                    seq 0 5 100 | while IFS= read -r seek; do
                        [ -f "$thumbfl-$i.jpg" ] || ffmpegthumbnailer -i "$1" -o "$thumbfl-$i.jpg" -s 0 -q 5 -t "$seek%"
                        : "$((i += 1))"
                    done

                    ffmpeg -framerate "${LF_PREVIEW_FRAMERATE:-"3"}" -i "$thumbfl-%d.jpg" "$thumbfl.$ext"

                    rm -f -- "$thumbfl"-*.jpg
                }
            else
                ext=jpg
                [ -f "$thumbfl.$ext" ] || {
                    resolution="$(ffprobe -v error -select_streams v:0 -show_entries stream=width,height -of csv=s=x:p=0 "$1")"
                    width="${resolution%x*}"
                    height="${resolution#*x}"

                    if [ "$width" -gt "$height" ]; then
                        tile=2x5
                        inc=11.1
                    else
                        tile=3x3
                        inc=12.4
                    fi

                    i=0
                    seq 0 "$inc" 100 | while IFS= read -r seek; do
                        [ -f "$thumbfl-$i.jpg" ] || ffmpegthumbnailer -i "$1" -o "$thumbfl-$i.jpg" -s 0 -q 5 -t "$seek%"
                        : "$((i += 1))"
                    done

                    montage "$thumbfl"-*.jpg -geometry +0+0 -tile "$tile" "$thumbfl.$ext"

                    rm -f -- "$thumbfl"-*.jpg
                }
            fi
            preview_image "$thumbfl.$ext" "$2" "$3" "$4" "$5"
            ;;
        image/heic)
            [ -f "$thumbfl.jpg" ] || heif-thumbnailer -- "$1" "$thumbfl.jpg"
            preview_image "$thumbfl.jpg" "$2" "$3" "$4" "$5"
            ;;
        image/*)
            preview_image "$@"
            ;;
        text/plain)
            [ -f "$thumbfl" ] || {
                touch -- "$thumbfl"
                [ "$(wc -l < "$1")" -eq 1 ] \
                    && grep -q -- '^data:image/[a-zA-Z0-9_-]\+;base64,' "$1" \
                    && sed -n -- 's|^data:image/[a-zA-Z0-9_-]\+;base64,||p;q' "$1" | base64 -d > "$thumbfl"
            }
            if [ -s "$thumbfl" ]; then
                preview_image "$thumbfl" "$2" "$3" "$4" "$5"
            else
                if [ "$(stat --printf="%s" -- "$1")" -le 16777216 ]; then # 16MiB
                    scope "$@"
                else
                    cat -- "$1"
                fi
            fi
            ;;
        *)
            scope "$@"
            ;;
    esac
}

main "$@"
exit 0
