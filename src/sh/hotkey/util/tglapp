#!/usr/bin/env sh
# Toggle an application on/off (i.e. launch or kill it).
# TODO: Add the ability to toggle applications from a file, i.e. add the ability to read from a file toggleable things like getpath -d -- etc. This could be made into a generic toggling system, using keycodes like in getpath -d -- etc. This way, key bindings in sxhkd will not be changed when an application used for a purpose changes (spt instead of spotify etc.). # TODO: Use this with sxhkd.
# TODO: Add an option to replace the current instance of the application with the new instance. Allow the new instance to be different if -k is passed. If -k is not passed, but this new option is, just "restart" the application. # TODO: Use this, along with -T on, in .xinitrc.
# TODO: Add an option to register an already running application. Instead of toggling the application, just register the given pid, checking that the pid exists if -a is passed. If -k is passed, register to the given keycode. Else, query the command that is running as the pid and compute the hash based on that.

eval "$(evalverbose)"

execname="${0##*/}"

printhelp() {
    printf "%s" \
"$execname [OPTION...] COMMAND -- COMMAND
Toggle an application on/off based on hashcodes and states.

$execname was originally written for toggling applications with the same hotkey via \`sxhkd\`.

Options:
   -a, --actual
       Use the actual status of applications to do work instead of the registered status. As an example, if an application is registered with a PID but is actually dead, the application will be cleaned and started if -P is passed. Inhibited by a following -p. See -p for more details. If -l or --list are also given, -c is implied.
   --no-actual
       Use the registered status of applications to do work instead of the actual status. As an example, if an application is registered with a PID but is actually dead, the application will be just be cleaned -P is not passed. Inhibited by a following -P. See -P for more details.
   -c, --clean
       Clean dead processes and exit if no command given.
   -f, --force-state
       Force the state given via -T. If the current state is already STATE, the state will be flipped twice. Has no effect unless -T is passed. Inhibited by a following --no-force-state.
   --no-force-state
       Inhibit -f. Inhibited by a following -f.
   -h, --help
       Print help message and exit.
   -k KEYCODE, --keycode KEYCODE
       Use KEYCODE to identify the given command instead of using an auto-computed hash. KEYCODE cannot include /.
   -l, --list STYLE
       List all applications started with $execname. STYLE can be one of: compact, normal. compact is recommended for scripting/grepping. -l uses the normal STYLE. If -a is also given, -c is implied. If -c is given or implied, listing will be done after cleaning.
   -Q, --quote
       Automatically quote each argument using '. Arguments before -Q is passed are not affected.
   --no-quote
       Revert -Q. Arguments between -Q and --no-quote are still affected.
   -q, --quiet
       If passed once, suppress stdout. If passed twice or more, suppress both stdout and stderr. Only the started application will be suppressed, $execname will print as usual.
   -r, --recursive
       Recursively kill all children if stopping the application.
   -S, --sudo
       Execute kill with sudo.
   -s, --status
       Only query the status of the command; exit with code 0 if state is on, else exit with code 127.
   -T STATE, --toggle STATE
       The given command's state is set to STATE instead of being flipped. If the current state is already STATE, nothing will be done unless -f is passed. STATE can be {on, off}.
   -t TIMEOUT SIGNAL, --timeout TIMEOUT SIGNAL
       Wait TIMEOUT milliseconds and send SIGNAL to the process if not terminated yet. TIMEOUT must be a non-negative integer in milliseconds and SIGNAL must be valid as in kill -L. Note that RT signals are not supported. If multiple -t options are passed, they will be executed in order. If no -t option is passed, a single TERM (i.e. 15) signal will be used without a timeout.
   -v, --verbose
        Print execution information to stderr.

Examples:
   Toggle screenkey.
      $ tglapp screenkey
   Toggle picom with experimental backends enabled.
      $ tglapp -- picom --experimetal-backends
   Toggle polybar on (-T on). If already on, restart it (-f). Use actual status of the process (-a), use 'polybar' as the keycode (-k polybar) and be verbose in logging (-v).
      $ tglapp -avfTk on polybar -- polybar
"
}

printusage() {
    printf "Option [%s] is not valid.\n\n" "$1" >&2
    printhelp
}

capturestdin() {
    [ -t 0 ] || {
        stdinfl="$(mktemp)"
        cp -f -- /dev/stdin "$stdinfl"
    }
}

assertarg() {
    [ -z "$3" ] && {
        printf "[ERROR]: Expected %s argument to %s, exiting.\n" "$2" "$1"
        exit 1
    }
}

unsetvars() {
    unset actual willclean forcestate keycode liststyle quote quiet recursive sudo status verbose
}

parseargs() {
    while [ -n "$1" ]; do
        if [ "${1%"${1#?}"}" = "-" ]; then
            if [ "${1%"${1#??}"}" != "--" ]; then
                sopt="${1#?}"

                while [ -n "$sopt" ]; do
                    opt="${sopt%"${sopt#?}"}"

                    case "$opt" in
                        a) parseargs --actual;;
                        c) parseargs --clean;;
                        f) parseargs --force-state;;
                        h) parseargs --help;;
                        k) shift; parseargs --keycode "$1";;
                        l) parseargs --list normal;;
                        Q) parseargs --quote;;
                        q) parseargs --quiet;;
                        r) parseargs --recursive;;
                        S) parseargs --sudo;;
                        s) parseargs --status;;
                        T) shift; parseargs --toggle "$1";;
                        t) shift; parseargs --timeout "$1" "$2"; shift;;
                        v) parseargs --verbose;;
                        *) printusage "-$opt"; exit 0;;
                    esac

                    sopt="${sopt#?}"
                done
            else
                opt="${1#??}"

                case "$opt" in
                    actual         ) actual=1;;
                    no-actual      ) actual=0;;
                    clean          ) willclean=1;;
                    force-state    ) forcestate=1;;
                    no-force-state ) forcestate=0;;
                    help           ) printhelp; exit 0;;
                    keycode        ) shift; assertarg "--keycode" "KEYCODE" "$1"; keycode="$1";;
                    keycode=*      )
                        keycode="${opt#*=}"
                        assertarg "--keycode" "KEYCODE" "$keycode"
                        ;;
                    list           ) shift; assertarg "--list" "STYLE" "$1"; liststyle="$1";;
                    list=*         )
                        liststyle="${opt#*=}"
                        assertarg "--list" "STYLE" "$liststyle"
                        ;;
                    quote          ) quote=\';;
                    no-quote       ) unset quote;;
                    recursive      ) recursive=1;;
                    quiet          ) quiet="1$quiet";;
                    sudo           ) sudo="sudo";;
                    status         ) status=1;;
                    toggle         ) shift; assertarg "--toggle" "STATE" "$1"; state="$1";;
                    toggle=*       ) state="${opt#*=}"; assertarg "--toggle" "STATE" "$state";;
                    timeout        )
                        shift
                        assertarg "--timeout" "TIMEOUT" "$1"
                        assertarg "--timeout" "SIGNAL" "$2"
                        timeouts="$timeouts$1
"
                        signals="$signals$2
"
                        shift
                        ;;
                    verbose        ) verbose=1;;
                    ""             ) shift; break;;
                    *              ) printusage "--$opt"; exit 0;;
                esac
            fi
        else
            cmd="$cmd $quote$1$quote"
        fi

        shift
    done

    for i; do
        cmd="$cmd $quote$i$quote"
    done
}

logwarn() {
    printf "[WARNING]: %s\n" "$@" >&2
}

logerr() {
    printf "[ERROR]: %s\n" "$@" >&2
}

logerrq() {
    logerr "$@"
    exit 1
}

logargcaseerrq() {
    argname="$(printf "%s" "$1" | PERLIO=:utf8 perl -pe '$_=uc')"
    shift
    logerrq "$argname must be one of {$(printf "%s, " "$@" | sed 's/, $//')}."
}

validargcase() {
    arg="$1"
    argname="$2"
    shift 2
    [ -z "$arg" ] || {
        for i; do
            [ "$arg" = "$i" ] && return 0
        done
        logargcaseerrq "$argname" "$@"
    }
}

validargs() {
    if [ -n "$liststyle" ]; then
        equals "$liststyle" compact normal \
            || logerrq "STYLE is invalid. See \`$execname -h\` for details."
    elif [ -z "$cmd" ] && [ "$willclean" != 1 ]; then
        if [ "$state" = "on" ] || [ -z "$keycode" ]; then
            logerrq "Command cannot be empty."
        fi
    fi
    validargcase "$state" "state" "on" "off"
    [ -n "$timeouts" ] && printf "%s" "$timeouts" | grep -q '[^0-9]' && logerrq "TIMEOUT is invalid. See \`$execname -h\` for details."
    [ -n "$signals" ] && \
        printf "%s" "$signals" | grep -Evxq 'HUP|INT|QUIT|ILL|TRAP|ABRT|IOT|BUS|FPE|KILL|USR1|SEGV|USR2|PIPE|ALRM|TERM|STKFLT|CHLD|CLD|CONT|STOP|TSTP|TTIN|TTOU|URG|XCPU|XFSZ|VTALRM|PROF|WINCH|IO|POLL|PWR|SYS|(3[01]|[12][0-9]|[1-9])' \
        && logerrq "SIGNAL is invalid. See kill -L for valid signals. Note that RT signals are not supported."
    contains "$keycode" "/" && logerrq "KEYCODE cannot contain /."
}

processargs() {
    cmd="${cmd#?}"

    [ -z "$keycode" ] && keycode="$(
        printf "%s" "$cmd" | sha512sum | awk '{print $1}' | tr -d '\n'
    )"

    if [ -z "$timeouts" ]; then
        killargs=""
    else
        while IFS= read -r timeout <&3 && IFS= read -r signal <&4; do
            killargs="$killargs --timeout $timeout $signal"
        done 3<<EOF1 4<<EOF2
$(printf "%s" "$timeouts" | head -c -1)
EOF1
$(printf "%s" "$signals" | head -c -1)
EOF2
    fi

    [ -n "$liststyle" ] && [ "$actual" = 1 ] && willclean=1

    case "${#quiet}" in
        0) :;;
        1) quiet="> /dev/null";;
        *) quiet="> /dev/null 2>&1";;
    esac

    if [ "$verbose" = 1 ]; then
        loginfo() {
            printf "[INFO]: %s\n" "$@" >&2
        }
        loginfo "Enabled verbose mode."
    else
        loginfo() {
            :
        }
    fi
}

runcmd() {
    mkdir -- "$keydir" || logerrq "Could not acquire lock for [$keydir]."

    if [ -z "$stdinfl" ]; then
        eval "( $cmd ) $quiet &" 1> "$keydir/stdout" 2> "$keydir/stderr"
    else
        eval "( $cmd ) < '$stdinfl' $quiet &" 1> "$keydir/stdout" 2> "$keydir/stderr"
    fi

    printf "%s\n" "$!" > "$keydir/pid"
    printf "%s\n" "$$" > "$keydir/selfpid"
    printf "%s\n" "$cmd" > "$keydir/cmd"
    printf "%s\n" "$argv" > "$keydir/argv"
    shell="$(ps h -p $$ -o args= | cut -d' ' -f1)" # https://unix.stackexchange.com/a/37844/401367
    printf "%s\n" "$shell" > "$keydir/shell"
    printf "%s\n" "$(realpath -P -- "$(whereis -b "$shell" | cut -d' ' -f2)")" > "$keydir/realshell"
    env > "$keydir/env"
    set > "$keydir/var"
    cat -- "$keydir/stdout" &
    cat -- "$keydir/stderr" &
}

stopcmd() {
    {   printf "%s\n" "$pid"
        [ "$recursive" = 1 ] && getchildren "$pid"
    } | sponge | xargs -d '\n' -rn 1 $sudo kill $killargs -- 2> /dev/null

    kill -s 0 "$pid" 2> /dev/null && {
        logwarn "Signals sent but process is still alive, not removing key directory."
        return 1
    }

    rm -rf -- "$keydir"
    loginfo "Wiped key directory."
}

main() {
    # `getpath -ds -- tglapp` is recommended to be a subdirectory of a directory mounted
    # on volatile memory, such as /tmp/somedir as /tmp is volatile on most systems.
    eval "$(getpath -dse -- tglapp flsdir 1 "No $execname location is set.")"

    keydir="$flsdir/$keycode"

    loginfo "Found $execname location: $flsdir" \
        "Assigned keycode: $keycode" \
        "Assigned key directory: $keydir"

    [ "$status" = "1" ] && {
        [ -d "$keydir" ] && kill -s 0 "$(cat -- "$keydir/pid" 2> /dev/null)" 2> /dev/null && {
            loginfo "Queried status on, exiting with code 0."
            exit 0
        }
        loginfo "Queried status off, exiting with code 127."
        exit 127
    }

    [ "$willclean" = 1 ] && {
        loginfo "Cleaning dead processes."
        # Ensure we're not wiping root.
        [ -z "$flsdir" ] && logerrq "A fatal error occurred, panicking instead of cleaning."
        for i in "${flsdir:?}"/*; do
            kill -s 0 "$(cat -- "$i/pid")" 2> /dev/null || rm -rf -- "$i"
        done

        loginfo "Cleaning finished."
        [ -z "$liststyle" ] && [ -z "$cmd" ] && {
            loginfo "No command or auxiliary action given, exiting with code 0."
            exit 0
        }
    }

    [ -n "$liststyle" ] && {
        loginfo "Listing to stdout."
        cd "$flsdir" || logerrq "Could not cd to $flsdir."

        case "$liststyle" in
            compact) grep -R '';;
            normal)
                find "." -mindepth 1 -maxdepth 1 -type d -printf "%P\n" | while IFS= read -r i; do
                printf "%s\n" \
                    "Keycode: $i" \
                    "Arguments: $(cat -- "$i/argv")" \
                    "Command: $(cat -- "$i/cmd")" \
                    "PID: $(cat -- "$i/pid")" \
                    "Self PID: $(cat -- "$i/selfpid")" \
                    "Shell: $(cat -- "$i/shell")" \
                    "Real Shell: $(cat -- "$i/realshell")" \
                    ""
                done | head -n -1
                ;;
        esac

        loginfo "Listing finished, exiting with code 0."
        exit 0
    }

    if [ -d "$keydir" ]; then
        loginfo "Key directory already exists, processing."
        pid="$(cat -- "$keydir/pid")"
        loginfo "Found PID: $pid"
        if kill -s 0 "$pid" 2> /dev/null; then
            loginfo "Process is alive."
            if [ -z "$state" ] || [ "$state" = "off" ]; then
                loginfo "Killing process."
                stopcmd
                loginfo "Process killed."
            elif [ "$forcestate" = "1" ]; then
                loginfo "Killing process."
                stopcmd
                loginfo "Process killed, force restarting."
                runcmd
                loginfo "Process started."
                wait
            fi
        else
            loginfo "Process is dead."
            rm -rf -- "$keydir"
            if [ -z "$state" ] || [ "$state" = "off" ]; then
                loginfo "Wiped key directory."
                [ "$actual" = "1" ] && {
                    loginfo "--actual is given, starting process."
                    runcmd
                    loginfo "Process started."
                    wait
                }
            elif [ "$state" = "on" ]; then
                loginfo "Starting process."
                runcmd
                loginfo "Process started."
                wait
            fi
        fi
    else
        loginfo "Key directory does not exist."
        if [ -z "$state" ] || [ "$state" = "on" ]; then
            loginfo "Starting process."
            runcmd
            loginfo "Started process."
            wait
        elif [ "$forcestate" = "1" ]; then
            loginfo "Starting process."
            runcmd
            loginfo "Started process, force restopping."
            pid="$(cat -- "$keydir/pid")"
            stopcmd
            loginfo "Process killed."
        fi
    fi
}

clean() {
    rm -rf -- "$stdinfl" "$keydir"
}

capturestdin
argv="$0 $*"
unsetvars
parseargs "$@"
validargs
processargs
loginfo "Arguments: $argv"
trap 'clean' INT TERM
main
clean
