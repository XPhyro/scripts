#!/usr/bin/env sh

. execinfo.sh
. io.sh
. shellverbose.sh

configfl="${XDG_CONFIG_HOME:-"$HOME/.config"}/scripts/vpn/config.sh"
if [ -f "$configfl" ]; then
    . "$configfl"
    hasconfig() {
        true
    }
else
    hasconfig() {
        false
    }
fi

unset optstatus
while getopts "hsv:" OPT; do
    case "$OPT" in
        h)
            printf "%s" \
"$execname [OPTION...]
   -h      Print help message and exit.
   -s      Print detailed status before initialisation.
   -v VPN  Set the VPN executable to use to VPN.
" >&2
            exit 0
            ;;
        s) optstatus=1;;
        v) VPN="$OPTARG";;
        *) printf "Invalid option given: %s\n" "$OPT" >&2; exit 1;;
    esac
done
shift "$((OPTIND - 1))"

[ -z "$VPN" ] && {
    fls="$(
        printf "%s\n" "$PATH" \
            | tr ':' '\n' \
            | xargs -P 12 -I PATH find PATH -mindepth 1 -maxdepth 1 -type f -executable 2> /dev/null
    )"
    possiblevpns="$(
        {   # TODO: Write a wrapper script for the following multi-grepping.
            printf "%s\n" "$fls" | grep -oi '[^/-]*vpn$' | sort
            printf "%s\n" "$fls" | grep -oi '[^/]*vpn$' | sort
            printf "%s\n" "$fls" | grep -oi '[^/]*vpn[^/]*$' | sort
        } | grep -vFx "${0##*/}" \
            | grep -vEx "(openvpn|statbarvpn|dwmbar-vpn|advpng|pcf2vpnc|vpnc|vpnc-disconnect)" \
            | uniqs \
            | awk 'BEGIN {i = 0} {i += 1; print "  "i" "$0}'
    )"

    if [ -z "$possiblevpns" ]; then
        printf "Could not find any VPNs. Enter the name of the command: " >&2
        VPN="$(readstr)" && [ -n "$VPN" ] || exit 1
    else
        printf "%s\n" "Select the VPN command:" "  0 Enter manually" "$possiblevpns" >&2
        selc="$(printf "%s\n" "$possiblevpns" | wc -l)"
        sel="$(
            if [ "$selc" -lt 10 ]; then
                readchar
            else
                readstr
            fi
        )"

        [ -n "$(printf "%s\n" "$sel" | tr -d '[:digit:]')" ] && {
            printf "You must enter the number before the command.\n\n" >&2
            exec "$0" "$@"
        }

        if [ "$sel" -eq 0 ]; then
            printf "Enter the name of the command: " >&2
            VPN="$(readstr)" && [ -n "$VPN" ] || exit 1
        elif [ "$sel" -lt "$((selc + 1))" ]; then
            VPN="$(
                printf "%s\n" "$possiblevpns" \
                    | torso "$sel" "$sel" \
                    | tail -c +"$((${#sel} + 4))"
            )"
        else
            printf "You entered an invalid number.\n\n" >&2
            exec "$0" "$@"
        fi
    fi
}

printf "Selected VPN: " >&2
color yellow "$VPN"
{ "$VPN" --help || "$VPN" --version; } > /dev/null || exit 1

if pgrep -u root openvpn > /dev/null 2>&1; then
    if [ -n "$optstatus" ]; then
        "$VPN" status
    else
        color green "An OpenVPN connection exists."
    fi
else
    if [ -n "$optstatus" ]; then
        printf "IP Address: %s\n" "$(curl ipinfo.io/ip 2> /dev/null)" >&2
    else
        color red "No OpenVPN connections exist."
    fi
fi

hasconfig || {
    case "$VPN" in
        protonvpn-cli)
            on_char_read() {
                case "$1" in
                    c)
                        printf "Enter country code: " >&2
                        protonvpn-cli c --cc "$(readstr)"
                        ;;
                    d) protonvpn-cli d;;
                    f) protonvpn-cli c -f;;
                    i) protonvpn-cli c;;
                    k)
                        protonvpn-cli ks --"$(
                            while :; do
                                printf "%s\n" "Killswitch [o/k/p]: " >&2
                                case "$(readchar)" in
                                    o) printf off;;
                                    k) printf on;;
                                    p) printf permanent;;
                                    *) continue;;
                                esac
                                break
                            done
                        )"
                        ;;
                    l) protonvpn-cli config -l;;
                    n)
                        protonvpn-cli ns --"$(
                            while :; do
                                printf "%s\n" "Netshield [o/m/a]: " >&2
                                case "$(readchar)" in
                                    o) printf off;;
                                    m) printf malware;;
                                    a) printf ads-malware;;
                                    *) continue;;
                                esac
                                break
                            done
                        )"
                        ;;
                    ''|q) ec=0 std_logfrawq "\r\033[A\033[2K\r\033[A\033[2K" >&2;;
                    r) protonvpn-cli r;;
                    s) protonvpn-cli s;;
                    *)
                        printf "%s\n" \
                           "c) connect to specific country" \
                           "d) disconnect" \
                           "f) connect to fastest" \
                           "i) connect interactively" \
                           "k) configure killswitch" \
                           "l) list configuration" \
                           "n) configure netshield" \
                           "q) quit" \
                           "r) reconnect" \
                           "s) status" \
                           "*) print this" >&2
                        ;;
                esac
            }
            ;;
        *)
            on_char_read() {
                case "$1" in
                    c) "$VPN" connect;;
                    d) "$VPN" disconnect;;
                    r) "$VPN" reconnect;;
                    s) "$VPN" status;;
                    ''|q) ec=0 std_logfrawq "\r\033[A\033[2K\r\033[A\033[2K" >&2;;
                    *)
                        printf "%s\n" \
                           "c) connect" \
                           "d) disconnect" \
                           "r) reconnect" \
                           "s) status" \
                           "q) quit" \
                           "*) print this" >&2
                        ;;
                esac
            }
            ;;
    esac
}

while :; do
    fillline "â€•" >&2
    printf "\n" >&2
    on_char_read "$(readchar)" || flushterm
done
