#!/usr/bin/env sh

eval "$(evalverbose)"

. utility.sh

execs="'xwallpaper', 'bgs', 'hsetroot' and 'mpv'"

unset optdepth optcount opttime
defaultdepth="$(printf "%s\n" "2^31 - 1" | bc)"
while getopts "D:d:hn:t:x:" OPT; do
    case "$OPT" in
        D)
            [ "$OPTARG" -ge 1 ] || std_logerrq "DEPTH must be a valid positive integer."
            optdepth="$OPTARG"
            ;;
        d)
            [ -d "$OPTARG" ] || std_logerrq "DIR must be a valid directory."
            optdir="$OPTARG"
            ;;
        h)
            printf "%s" \
"wallpaper [OPTION...]
   -D DEPTH   Search for wallpapers at at most DEPTH depth. Default is $defaultdepth.
   -d DIR     Use DIR as wallpaper directory. Default is \`getpath -ds -- wa\`/{image,video} depending the selected executable.
   -h         Print help message and exit.
   -n COUNT   Count of unique wallpapers to dispatch. Default is your display count as of initialisation. Ignored if -x is 'hsetroot'.
   -t TIME    Wait TIME between wallpaper changes. TIME must be a valid sleep(1) time. Default is 15m.
   -x EXEC    Executable to use. Can be one of $execs. If not given, the aforementioned executables are searched for in the given order and the first installed one is used. At least one must be installed.
"
            exit 0
            ;;
        n)
            [ "$OPTARG" -gt 0 ] || std_logerrq "COUNT must be a valid positive integer."
            optcount="$OPTARG"
            ;;
        t) opttime="$OPTARG";;
        x)
            case "$OPTARG" in
                bgs|hsetroot|xwallpaper|mpv) :;;
                *) std_logerrq "EXEC must be one of $execs.";;
            esac
            optexec="$OPTARG"
            ;;
        *) printf "Invalid option given: %s\n" "$OPT"; exit 1;;
    esac
done
shift "$((OPTIND - 1))"

[ -z "$optdepth" ] && optdepth="$defaultdepth"
[ -z "$opttime" ] && opttime=15m
[ -z "$optcount" ] && optcount="$(xrandr --listactivemonitors | head -n 1 | cut -d' ' -f2)"
[ -z "$optexec" ] && {
    optexec="$(fmapsb xwallpaper=xwallpaper bgs=bgs hsetroot=hsetroot mpv=mpv)"
    [ -z "$optexec" ] \
        && std_logerrq "At least one of $execs must be installed."
}
[ -z "$optdir" ] && {
    eval "$(getpath -dse -- wa optdir 1 "getpath -ds -- failed.")"
    optdir="$optdir/$(printf "%s\n" "$optexec" | DEF=image fmaps mpv=video)"
}

case "$optexec" in
    bgs)
        find "$optdir/" -mindepth 1 -maxdepth "$optdepth" \( -type f -o -type l \) -not -path "*/*ignore*/*" -print0 \
            | xargs -r0 -n 20 -P 64 file -00 -L --mime-type -- \
            | xargs -r0 -n 2 sh -c 'prefixes "$2" "image/" && printf "%s\0" "$1"' -- \
            | shufr -U0 \
            | xargs -r0 -n "$optcount" sh -c '
                bgs -z "$@"
                printf "%s\n" "$@" > '"$optdir/.current-wallpapers"'
                sleep '"$opttime"'
            ' --
        ;;
    hsetroot)
        find "$optdir/" -mindepth 1 -maxdepth "$optdepth" \( -type f -o -type l \) -not -path "*/*ignore*/*" -print0 \
            | xargs -r0 -n 20 -P 64 file -00 -L --mime-type -- \
            | xargs -r0 -n 2 sh -c 'prefixes "$2" "image/" && printf "%s\0" "$1"' -- \
            | shufr -U0 \
            | xargs -r0 -n 1 sh -c '
                hsetroot -cover "$1"
                printf "%s\n" "$1" > '"$optdir/.current-wallpapers"'
                sleep '"$opttime"'
            ' --
        ;;
    xwallpaper)
        find "$optdir/" -mindepth 1 -maxdepth "$optdepth" \( -type f -o -type l \) -not -path "*/*ignore*/*" -print0 \
            | xargs -r0 -n 20 -P 64 file -00 -L --mime-type -- \
            | xargs -r0 -n 2 sh -c 'prefixes "$2" "image/" && printf "%s\0" "$1"' -- \
            | shufr -U0 \
            | xargs -r0 -n "$optcount" sh -c '
                while IFS= read -r mon <&3 && IFS= read -r fl <&4; do
                    xwallpaper --output "$mon" --zoom "$fl" &
                done 3<<EOF3 4<<EOF4
$(xrandr | grep -Fw "connected" | cut -d" " -f1)
EOF3
$(printf "%s\n" "$@")
EOF4
                printf "%s\n" "$@" > '"$optdir/.current-wallpapers"'
                sleep '"$opttime"'
            ' --
        ;;
    mpv)
        find "$optdir/" -mindepth 1 -maxdepth "$optdepth" \( -type f -o -type l \) -not -path "*/*ignore*/*" -print0 \
            | xargs -r0 -n 20 -P 64 file -00 -L --mime-type -- \
            | xargs -r0 -n 2 sh -c 'prefixes "$2" "video/" && printf "%s\0" "$1"' -- \
            | shufr -U0 \
            | xargs -r0 -n "$optcount" sh -c '
                clean() {
                    printf "%s\n" "$pids" | while IFS= read -r pid; do
                        kill "$pid"
                    done
                }

                pids="$(while IFS= read -r geom <&3 && IFS= read -r fl <&4; do
                    xwinwrap -g "$geom" -st -sp -ni -s -nf -b -un -argb -fdt -ov -sub WID -- \
                        prime-run mpv \
                            --loop \
                            --hwdec=auto \
                            --hwdec-codecs=all \
                            --vo=gpu \
                            --no-config \
                            --no-input-terminal \
                            --no-input-cursor \
                            --no-osc \
                            --no-osd-bar \
                            --no-input-default-bindings \
                            --cursor-autohide=no \
                            --mute=yes \
                            --stop-screensaver=no \
                            --panscan=1 \
                            --wid=WID \
                            -- "$fl" > /dev/null 2> /dev/null &
                    printf "%s\n" "$!"
                done 3<<EOF3 4<<EOF4
$(xrandr | sed -n "s/[a-zA-Z0-9_-]\+ connected \(primary \)\?\([0-9]\+x[0-9]\++[0-9]\++[0-9]\+\) (.*$/\2/p")
EOF3
$(printf "%s\n" "$@")
EOF4
)"
                printf "%s\n" "$@" > '"$optdir/.current-wallpapers"'
                trap clean INT TERM EXIT QUIT
                sleep '"$opttime"'
                clean
            ' --
        ;;
esac
