#!/usr/bin/env sh
#
# For optimum operation, include
# ```
# seq 0 9 | while IFS= read -r i; do
#     bspc rule -a "*:bspwmpad$i" state=floating hidden=true
# done
# ```
# in your `bspwmrc`.
#
# bspwm is not required for operation, but the script was designed with it in mind.

eval "$(evalverbose)"

execname="${0##*/}"

printhelp() {
    printf "%s\n" \
"$execname [OPTION...] -- [COMMAND...]
   -d PATH, --directory PATH
       Execute the command after changing the working directory to PATH.
   -g GEOMETRY, --geometry GEOMETRY
       Define the geometry that st should use. See st(1) for details.
   -n NUMBER, --number NUMBER
       Use pad number NUMBER. Number can be an integer between 0 and 9. If 0 is passed, the given command is ignored and statistics about the other pads are shown.
   -T, --tiled
       Start in tiled mode.
   -t TITLE, --title TITLE
       Title of the st instance. If not given, 'bspwmpad #NUMBER' will be used.
   -v, --verbose
       Print commands as executed.
   -H, --hidden
       Start the pad hidden.
   -h, --help
       Print help message and exit."
}

printusage() {
    printf "Option [%s] is not valid.\n\n" "$1" >&2
    printhelp
}

logerrq() {
    printf "[ERROR]: %s\n" "$1" >&2
    exit 1
}

assertarg() {
    [ -z "$3" ] && logerrq "Expected $2 argument to $1, exiting."
}

setdefargs() {
    unset optdirectory optgeometry optnumber opttiled opttitle opthidden
}

preprocessargs() {
    argcmdcount=0
    for i; do
        : $((argcmdcount += 1))
        [ "$i" = "--" ] && break
    done
}

parseargs() {
    while [ -n "$1" ]; do
        if [ "${1%"${1#?}"}" = "-" ]; then
            if  [ "${1%"${1#??}"}" != "--" ]; then
                sopt="${1#?}"

                while [ -n "$sopt" ]; do
                    opt="${sopt%"${sopt#?}"}"

                    case "$opt" in
                        d) shift; parseargs --directory "$1";;
                        g) shift; parseargs --geometry "$1";;
                        n) shift; parseargs --number "$1";;
                        T) parseargs --tiled;;
                        t) shift; parseargs --title "$1";;
                        v) parseargs --verbose;;
                        H) parseargs --hidden;;
                        h) parseargs --help;;
                        *) printusage "$1"; exit 0;;
                    esac

                    sopt="${sopt#?}"
                done
            else
                opt="${1#??}"

                case "$opt" in
                    directory   )
                        shift
                        assertarg "-d, --directory" "PATH" "$1"
                        optdirectory="-d $1"
                        ;;
                    directory=* )
                        optdirectory="-d ${opt#*=}"
                        assertarg "-d, --directory" "PATH" "$optdirectory"
                        ;;
                    geometry    )
                        shift
                        assertarg "-g, --geometry" "GEOMETRY" "$1"
                        optgeometry="-g $1"
                        ;;
                    geometry=*  )
                        optgeometry="-g ${opt#*=}"
                        assertarg "-g, --geometry" "GEOMETRY" "$optgeometry"
                        ;;
                    number      )
                        shift
                        assertarg "-n, --number" "NUMBER" "$1"
                        optnumber="$1"
                        ;;
                    number=*    )
                        optnumber="${opt#*=}"
                        assertarg "-n, --number" "NUMBER" "$optnumber"
                        ;;
                    tiled       ) opttiled=1;;
                    title       )
                        shift
                        assertarg "-t, --title" "TITLE" "$1"
                        opttitle="$1"
                        ;;
                    title=*     )
                        opttitle="${opt#*=}"
                        assertarg "-t, --title" "TITLE" "$opttitle"
                        ;;
                    verbose     ) export BSPWMPADINIT_VERBOSE=1; set -x;;
                    hidden      ) opthidden=1;;
                    help        ) printhelp; exit 0;;
                    ""          ) return 0;;
                    *           ) printusage "$1"; exit 0;;
                esac
            fi
        else
            printusage "$1"
            exit 0
        fi

        shift
    done
}

processargs() {
    [ -n "$optnumber" ] \
        && { [ "${#optnumber}" -ne 1 ] \
                || [ -z "$(printf "%s" "$optnumber" | tr -dc '0-9')" ]
        } && logerrq "Invalid NUMBER passed, exiting."
}

handlenode() {
    id="$1"
    fd="${2:-"$(bspc query -D -d focused)"}"
    if [ "$(bspc query -D -n "$id")" = "$fd" ]; then
        if bspwm-qflag hidden "$id"; then
            bspc node "$id" --flag hidden=false -f
        else
            bspc node "$id" --flag hidden=true -d last:^20
        fi
    else
        bspc node "$id" -d "$fd" --flag hidden=false -f
    fi
}

main() {
    eval "$(getpath -dse -- bspwmpadlck lckdir 1 "[ERROR]: getpath -ds -- failed, aborting.")"

    [ -n "$optnumber" ] && {
        # shellcheck disable=SC2154
        if [ -f "$lckdir/$optnumber/ids" ]; then
            fd="$(bspc query -D -d focused)"
            while IFS= read -r i; do
                handlenode "$i" "$fd"
            done < "$lckdir/$optnumber/ids"
            exit 0
        elif [ -d "$lckdir/$optnumber" ]; then
            handlenode "$(xdotool search --limit 1 --classname "bspwmpad$lck")"
            exit 0
        fi
    }

    lck="$(
        printf "%s\n" "${optnumber:-"$(seq 1 9)"}" | while IFS= read -r i; do
            mkdir -- "$lckdir/$i" 2> /dev/null && {
                printf "%s" "$i"
                break
            }
        done
    )"

    [ -z "$lck" ] && {
        notify-send -t 2000 "bspwmpad" "Waiting for lock acquisition..." &

        lck="$(
            while true; do
                i="$(inotifywait -q -e "delete" --format "%f" -- "$lckdir")"
                [ -n "$optnumber" ] && [ "$i" != "$optnumber" ] && continue
                mkdir -- "$lckdir/$i" 2> /dev/null && {
                    printf "%s" "$i"
                    break
                }
            done
        )"
    }

    shift "$argcmdcount"

    export PAD_LEVEL="$((PAD_LEVEL + 1))"

    export TABBED_ARGS="$optgeometry -n bspwmpad$lck"
    # shellcheck disable=SC2086
    st $optdirectory -n "bspwmpad$lck" \
        -t "bspwmpad #$lck: ${opttitle:-"${*:-"$SHELL"}"}" \
        -e bspwmpadinit "$lckdir" "$lck" "$@" &
    until ids="$(xdotool search --limit 0 --classname "bspwmpad$lck")"; do
        sleep 0.1
    done

    if [ "$opthidden" = 1 ]; then
        bspcargs="--flag hidden=true -d last:^20"
    else
        bspcargs="--flag hidden -f"
    fi
    [ "$opttiled" = 1 ] && bspcargs="--state tiled $bspcargs"

    printf "%s\n" "$ids" | while IFS= read -r i; do
        bspc node "$i" $bspcargs
    done

    wait
}

clean() {
    rm -rf -- "${lckdir:?}/${lck:?}"
}

setdefargs
preprocessargs "$@"
[ -z "$PAD_LEVEL" ] && PAD_LEVEL=0
[ -z "$PAD_FORCE" ] && export PAD_FORCE=0
[ "$PAD_FORCE" -eq 0 ] && [ "$PAD_LEVEL" -gt 0 ] && {
    shift "$argcmdcount"
    export PAD_LEVEL="$((PAD_LEVEL + 1))"
    eval "${*:-"$SHELL"}"
    exit "$?"
}
parseargs "$@"
processargs
trap clean TERM
main "$@"
clean
