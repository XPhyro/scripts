#!/usr/bin/env python3


from dbus import SessionBus
from dbus.mainloop.glib import DBusGMainLoop
from gi.repository.GLib import MainLoop
from math import floor
from os import rmdir, fsync
from os.path import isdir
from subprocess import run
from sys import stderr
from time import time


def setfilepaths():
    global logfilepath
    global blacklogfilepath
    global lockdirpath
    global logfile
    global blacklogfile

    logfilepath = (
        run(["getflunsafe", "notiflog"], capture_output=True)
        .stdout.decode("utf-8")
        .rstrip("\n")
    )
    print("Found log file path: %s" % logfilepath)

    if not logfilepath:
        print("`getflunsafe notiflog` failed, exiting.", file=stderr)
        exit(1)

    blacklogfilepath = (
        run(["getflunsafe", "notiflogblack"], capture_output=True)
        .stdout.decode("utf-8")
        .rstrip("\n")
    )
    print("Found blacklisted log file path: %s" % blacklogfilepath)

    if not blacklogfilepath:
        print("`getflunsafe notiflogblack` failed, exiting.", file=stderr)
        exit(1)

    lockdirpath = (
        run(["getdirunsafe", "notifloglck"], capture_output=True)
        .stdout.decode("utf-8")
        .rstrip("\n")
    )
    print("Found lock file path: %s" % lockdirpath)

    if not lockdirpath:
        print("`getdirunsafe notifloglck` failed, exiting.", file=stderr)
        exit(1)

    logfile = open(logfilepath, "a")
    blacklogfile = open(blacklogfilepath, "a")


def isblacklisted(appname, id, appicon, summary, body, actions, hints, expiretimeout):
    # TODO: Parse a configuration file
    if appname == "Brave" and body[0:3] == " \n\n":
        return True
    return False


def log(file, summary, body):
    file.write(
        "%s\b%s\b%s\n"
        % (floor(time()), summary.replace("\n", "\r"), body.replace("\n", "\r"))
    )
    file.flush()


def filternotif(bus, message):
    try:
        appname, id, appicon, summary, body, actions, hints, expiretimeout = [
            str(arg) for arg in message.get_args_list()
        ]

        print(
            "Received notification:\nTime: %s\nSummary:\n%s\nBody:\n%s\nApp Name: %s\nID: %s\nApp Icon: %s\nExpire Timeout: %s\n"
            % (floor(time()), summary, body, appname, id, appicon, expiretimeout)
        )

        if isblacklisted(
            appname, id, appicon, summary, body, actions, hints, expiretimeout
        ):
            print(
                "Notification blacklisted, logging to blacklist file and closing dunst view"
            )
            run(["dunstctl", "close"])
            log(blacklogfile, summary, body)
        elif not isdir(lockdirpath):
            print("Logging notification")
            log(logfile, summary, body)
        else:
            print("Lock file present, not logging")
            rmdir(lockdirpath)
    except Exception as e:
        print("Caught exception: " + repr(e))


def main():
    setfilepaths()

    try:
        rmdir(lockdirpath)
    except:
        pass

    DBusGMainLoop(set_as_default=True)

    bus = SessionBus()
    bus.add_match_string_non_blocking(
        "eavesdrop=true, interface='org.freedesktop.Notifications', member='Notify'"
    )
    bus.add_message_filter(filternotif)

    MainLoop().run()

    logfile.close()
    blacklogfile.close()


if __name__ == "__main__":
    main()
