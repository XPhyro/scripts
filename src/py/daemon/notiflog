#!/usr/bin/env python3


from math import floor
from os import rmdir
from os.path import isdir
from subprocess import run
from sys import stderr
from time import time

from dbus import SessionBus
from dbus.mainloop.glib import DBusGMainLoop
from gi.repository.GLib import MainLoop


def setfilepaths():
    global logfilepath
    global blacklogfilepath
    global lockdirpath
    global logfile
    global blacklogfile

    logfilepath = run(
        ["getpath", "-fu", "--", "notiflog"], capture_output=True
    ).stdout.decode("utf-8")
    print(f"Found log file: {logfilepath}")

    if not logfilepath:
        print("`getpath -fu -- notiflog` failed, exiting.", file=stderr)
        exit(1)

    blacklogfilepath = run(
        ["getpath", "-fu", "--", "notiflogblack"], capture_output=True
    ).stdout.decode("utf-8")
    print(f"Found blacklisted log file: {blacklogfilepath}")

    if not blacklogfilepath:
        print("`getpath -fu -- notiflogblack` failed, exiting.", file=stderr)
        exit(1)

    lockdirpath = run(
        ["lck", "-p", "--", "notiflog"], capture_output=True
    ).stdout.decode("utf-8")[:-1]
    print(f"Found lock directory: {lockdirpath}")

    if not lockdirpath:
        print("`lck -p -- notiflog` failed, exiting.", file=stderr)
        exit(1)

    logfile = open(logfilepath, "a")
    blacklogfile = open(blacklogfilepath, "a")


def isblacklisted(appname, id, appicon, summary, body, actions, hints, expiretimeout):
    # TODO: Parse a configuration file
    if appname == "Brave" and body[0:3] == " \n\n":
        return True
    return False


def log(file, summary, body):
    # "The point of this is to disallow convoluted code" says the author of PEP 498
    newline = "\n"
    linefeed = "\r"
    file.write(
        f"{floor(time())}\b"
        f"{summary.replace(newline, linefeed)}\b"
        f"{body.replace(newline, linefeed)}\n"
    )
    file.flush()


def filternotif(bus, message):
    try:
        appname, id, appicon, summary, body, actions, hints, expiretimeout = [
            str(arg) for arg in message.get_args_list()
        ]

        print(
            "Received notification:\n"
            f"Time: {floor(time())}\n"
            f"Summary:\n{summary}\n"
            f"Body:\n{body}\n"
            f"App Name: {appname}\n"
            f"ID: {id}\n"
            f"App Icon: {appicon}\n"
            f"Expire Timeout: {expiretimeout}\n"
        )

        if isblacklisted(
            appname, id, appicon, summary, body, actions, hints, expiretimeout
        ):
            print(
                "Notification blacklisted, logging to blacklist file and closing dunst view"
            )
            run(["dunstctl", "close"])
            log(blacklogfile, summary, body)
        elif not isdir(lockdirpath):
            print("Logging notification")
            log(logfile, summary, body)
        else:
            print("Lock file present, not logging")
            rmdir(lockdirpath)
    except Exception as e:
        print(f"Caught exception: {repr(e)}")


def main():
    setfilepaths()

    try:
        rmdir(lockdirpath)
    except FileNotFoundError:
        pass
    except Exception as e:
        print(f"Caught exception: {repr(e)}")

    DBusGMainLoop(set_as_default=True)

    bus = SessionBus()
    bus.add_match_string_non_blocking(
        "eavesdrop=true, interface='org.freedesktop.Notifications', member='Notify'"
    )
    bus.add_message_filter(filternotif)

    MainLoop().run()

    logfile.close()
    blacklogfile.close()


if __name__ == "__main__":
    main()
