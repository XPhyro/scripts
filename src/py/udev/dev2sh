#!/usr/bin/env python3


import argparse
import asyncio as aio
import importlib.util
import multiprocessing as mp
import os
import subprocess as sp
import sys
import threading as tp
import time

from Xlib import display as xdisp
import Xlib as xlib
import evdev as ev
import inotify.adapters


PROGRAM_NAME = sys.argv[0].rsplit("/", maxsplit=1)[-1]


class API:
    _print_buffer = []
    _default_stdout = sp.DEVNULL
    _default_stderr = sp.DEVNULL

    def __init__(self):
        self._repeat_processes = {}
        self._dotool_instance = sp.Popen(
            ["dotoolc"],
            stdin=sp.PIPE,
            stdout=sp.DEVNULL,
            bufsize=0,
        )

    @staticmethod
    def spawn_cmd(cmd, *args, **kwargs):
        API._print_buffer.append((f"spawning command {repr(cmd)}", sys.stdout))
        return sp.Popen(
            cmd,
            *args,
            start_new_session=True,
            stdout=API._default_stdout,
            stderr=API._default_stderr,
            **kwargs,
        )

    @staticmethod
    def spawn_shell(cmd, *args, **kwargs):
        API._print_buffer.append((f"spawning shell {repr(cmd)}", sys.stdout))
        return sp.Popen(
            cmd,
            *args,
            start_new_session=True,
            shell=True,
            stdout=API._default_stdout,
            stderr=API._default_stderr,
            **kwargs,
        )

    @staticmethod
    def spawn(cmd, *args, **kwargs):
        cmd_type = type(cmd)

        if cmd_type in [list, tuple]:
            return API.spawn_cmd(cmd, *args, **kwargs)
        if cmd_type is str:
            return API.spawn_shell(cmd, *args, **kwargs)

        API._print_buffer.append(
            (f"could not determine how to spawn {repr(cmd)}", sys.stderr)
        )

        return None

    def _dotool_write(self, data):
        self._dotool_instance.stdin.write(f"{data}\n".encode())

    def send_key(self, keys, modifiers=None):
        ks = [str(key) for key in keys]
        ms = [str(modifier) for modifier in modifiers] if modifiers else []

        for m in ms:
            self._dotool_write(f"keydown {m}")
        for k in ks:
            self._dotool_write(f"key {k}")
        for m in ms:
            self._dotool_write(f"keyup {m}")

    def send_key_down(self, keys, modifiers=None):
        ks = [str(key) for key in keys]
        ms = [str(modifier) for modifier in modifiers] if modifiers else []

        for m in ms:
            self._dotool_write(f"keydown {m}")
        for k in ks:
            self._dotool_write(f"keydown {k}")

    def send_key_up(self, keys, modifiers=None):
        ks = [str(key) for key in keys]
        ms = [str(modifier) for modifier in modifiers] if modifiers else []

        for m in ms:
            self._dotool_write(f"keyup {m}")
        for k in ks:
            self._dotool_write(f"keyup {k}")

    def _repeat_key_impl(self, keys, modifiers, down_time, up_time):
        if not down_time:
            while True:
                self.send_key(keys, modifiers)
                time.sleep(up_time)
        else:
            while True:
                self.send_key_down(keys, modifiers)
                time.sleep(down_time)
                self.send_key_up(keys, modifiers)
                time.sleep(up_time)

    def start_repeat_key(self, keys, modifiers=None, down_time=None, up_time=0.0):
        process = mp.Process(
            target=self._repeat_key_impl,
            args=(keys, modifiers or [], down_time, up_time),
        )
        process.start()
        self._repeat_processes[process.pid] = process
        return process.pid

    def stop_repeat_key(self, repeat_id):
        if repeat_id in self._repeat_processes:
            process = self._repeat_processes.pop(repeat_id)
            process.kill()

    def send_mouse(self, buttons, modifiers=None):
        bs = [str(button) for button in buttons]
        ms = [str(modifier) for modifier in modifiers] if modifiers else []

        for m in ms:
            self._dotool_write(f"keydown {m}")
        for b in bs:
            self._dotool_write(f"click {b}")
        for m in ms:
            self._dotool_write(f"keyup {m}")

    def send_mouse_down(self, buttons, modifiers=None):
        bs = [str(button) for button in buttons]
        ms = [str(modifier) for modifier in modifiers] if modifiers else []

        for m in ms:
            self._dotool_write(f"keydown {m}")
        for b in bs:
            self._dotool_write(f"mousedown {b}")

    def send_mouse_up(self, buttons, modifiers=None):
        bs = [str(button) for button in buttons]
        ms = [str(modifier) for modifier in modifiers] if modifiers else []

        for m in ms:
            self._dotool_write(f"keyup {m}")
        for b in bs:
            self._dotool_write(f"mouseup {b}")

    def _repeat_mouse_impl(self, buttons, modifiers, down_time, up_time):
        if not down_time:
            while True:
                self.send_mouse(buttons, modifiers)
                time.sleep(up_time)
        else:
            while True:
                self.send_mouse_down(buttons, modifiers)
                time.sleep(down_time)
                self.send_mouse_up(buttons, modifiers)
                time.sleep(up_time)

    def start_repeat_mouse(self, buttons, modifiers=None, down_time=None, up_time=0.0):
        process = mp.Process(
            target=self._repeat_mouse_impl,
            args=(buttons, modifiers or [], down_time, up_time),
        )
        process.start()
        self._repeat_processes[process.pid] = process
        return process.pid

    def stop_repeat_mouse(self, repeat_id):
        if repeat_id in self._repeat_processes:
            process = self._repeat_processes.pop(repeat_id)
            process.kill()

    def type_text(self, text):
        self._dotool_write(f"type {text}")


class CallbackData:
    EVENT_TYPE_UP = 0
    EVENT_TYPE_DOWN = 1
    EVENT_TYPE_HOLD = 2
    EVENT_TYPE_NAMES = {0: "up", 1: "down", 2: "hold"}

    def __init__(self, button, event_type, value, sec, delta_sec, hold_sec):
        self.button = button
        self.event_type = event_type
        self.value = value
        self.sec = sec
        self.delta_sec = delta_sec
        self.hold_sec = hold_sec

    def __str__(self):
        event_type_str = (
            self.event_type
            if self.button in [0, 1] or self.value != 1
            else self.EVENT_TYPE_NAMES.get(self.event_type, self.event_type)
        )
        return (
            f"{{button: {self.button}, event_type: {event_type_str}, "
            + f"value: {self.value}, sec: {self.sec:.4f}, "
            + f"delta_sec: {self.delta_sec:.4f}, "
            + f"hold_sec: {self.hold_sec:.4f}}}"
        )

    def __eq__(self, other):
        props = (
            self.button,
            self.event_type,
            self.value,
            self.sec,
            self.delta_sec,
            self.hold_sec,
        )
        other_type = type(other)

        if other_type in [tuple, list]:
            if len(other) > 0 and type(other[0]) in [tuple, list]:
                for i in other:
                    if self != i:
                        return False
                return True
            for i in range(min(len(props), len(other))):
                if props[i] != other[i]:
                    return False
            return True

        if other_type is CallbackData:
            return props == (
                other.button,
                other.value,
                other.event_type,
                other.sec,
                other.delta_sec,
                other.hold_sec,
            )

        return self.button == other

    def __ne__(self, other):
        return not self == other


def parse_args():
    parser = argparse.ArgumentParser(
        prog=PROGRAM_NAME,
        description="Read input devices and execute shell commands accordingly.",
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
    )

    parser.add_argument(
        "-c",
        "--config-path",
        default=(os.environ.get("XDG_CONFIG_HOME") or f"{os.environ['HOME']}/.config")
        + "/scripts/dev2sh/config.py",
        help="path to the configuration file",
    )

    parser.add_argument(
        "-l",
        "--list-devices",
        action="store_true",
        help="list device names for use in configuration files",
    )

    parser.add_argument(
        "-v",
        "--verbose",
        action="store_true",
        help="increase verbosity",
    )

    args = parser.parse_args()
    post_process_args(args)

    return args


def post_process_args(args):
    if args.list_devices:
        print(
            "\n".join(
                [
                    f"[{dev.name}]:\n\t{dev.capabilities(verbose=True)}"
                    for dev in [
                        ev.InputDevice(dev_path) for dev_path in ev.list_devices()
                    ]
                ]
            )
        )
        sys.exit(0)


def get_config(config_path):
    spec = importlib.util.spec_from_file_location(
        config_path.removesuffix(".py"), config_path
    )
    module = importlib.util.module_from_spec(spec)
    spec.loader.exec_module(module)
    module.API = API()
    module.init()
    return module


def get_wm_props(default=None):
    try:
        display = xdisp.Display()
        root = display.screen().root
        net_wm_name = display.intern_atom("_NET_WM_NAME")
        net_active_window = display.intern_atom("_NET_ACTIVE_WINDOW")

        active_window_id = root.get_full_property(net_active_window, 0).value[0]

        window = display.create_resource_object("window", active_window_id)
        wm_name = window.get_full_property(net_wm_name, 0).value
        wm_class = window.get_wm_class()

        wm_instance = wm_class[0] if wm_class else ""
        wm_class = wm_class[1] if wm_class else ""
        wm_name = wm_name.decode("utf-8") if wm_name else ""
        return (wm_class, wm_instance, wm_name)
    except Exception:
        return (default, default, default)


def update_selector_loop(config_path, dev_name):
    global selector_func
    global callback_func
    global last_wm_props

    while True:
        try:
            i = inotify.adapters.Inotify()
            i.add_watch(config_path)

            for event in i.event_gen(yield_nones=False):
                (_, event_types, _, _) = event

                if "IN_IGNORED" in event_types:
                    break

                if (
                    "IN_MOVE_SELF" not in event_types
                    and "IN_MODIFY" not in event_types
                    and "IN_ATTRIB" not in event_types
                ):
                    continue

                time.sleep(0.100)
                selector_func = get_config(config_path).dev_to_selector[dev_name]
                callback_func = selector_func(*last_wm_props)
                print("Config reloaded")
        except FileNotFoundError as e:
            if e.errno != 2:
                raise e


def update_callback_loop(config_path, dev_name, initial_wm_props):
    global callback_func
    global selector_func
    global last_wm_props

    selector_func = get_config(config_path).dev_to_selector[dev_name]
    last_wm_props = initial_wm_props

    thread = tp.Thread(
        target=update_selector_loop,
        args=(config_path, dev_name),
    )
    thread.start()

    display = xdisp.Display()
    root = display.screen().root
    net_active_window = display.intern_atom("_NET_ACTIVE_WINDOW")
    root.change_attributes(
        event_mask=xlib.X.PropertyChangeMask | xlib.X.SubstructureNotifyMask
    )

    while True:
        event = display.next_event()
        if event.type == xlib.X.PropertyNotify and event.atom == net_active_window:
            wm_props = get_wm_props(default=None)

            if (
                wm_props[0] is None
                or wm_props[1] is None
                or wm_props[2] is None
                or wm_props == last_wm_props
            ):
                continue

            callback_func = selector_func(*wm_props)
            last_wm_props = wm_props


def dev_read_loop(args, dev_name: str, dev_paths: [str], config_path: str):
    os.environ["DEV2SH_DEVICE_PATHS"] = "\n".join(dev_paths)

    initial_wm_props = get_wm_props(default="")
    dev_to_selector = get_config(config_path).dev_to_selector
    if dev_name not in dev_to_selector:
        return

    global callback_func
    callback_func = dev_to_selector[dev_name](*initial_wm_props)

    thread = tp.Thread(
        target=update_callback_loop,
        args=(config_path, dev_name, initial_wm_props),
    )
    thread.start()

    global last_timestamps
    global last_inverse_timestamps
    global event_counter
    last_timestamps = {}
    last_inverse_timestamps = {}
    event_counter = 0

    def dev_read_loop_impl(ui, event):
        global last_timestamps
        global last_inverse_timestamps
        global event_counter

        button, event_type, value = event.code, event.value, event.type
        if button == event_type == value == 0:
            return

        last_timestamp = last_timestamps.get((button, event_type, value), (0, 0))
        last_inverse_timestamp = last_inverse_timestamps.get(
            (button, event_type), (0, 0)
        )

        sec = event.sec + event.usec / 1e6
        delta_sec = sec - (last_timestamp[0] + last_timestamp[1] / 1e6)
        hold_sec = sec - (last_inverse_timestamp[0] + last_inverse_timestamp[1] / 1e6)
        callback_data = CallbackData(
            button, event_type, value, sec, delta_sec, hold_sec
        )

        if args.verbose:
            print(f"{event_counter}: received event {callback_data}")

        if callback_func is not None:
            grab = callback_func(callback_data)

            if grab:
                if API._print_buffer or args.verbose:
                    if not args.verbose:
                        print(f"{event_counter}: received event {callback_data}")
                    print("caught event")
            else:
                if args.verbose:
                    print("passed event through")
                ui.write_event(event)
                ui.syn()

            while API._print_buffer:
                string, file = API._print_buffer.pop(0)
                print(string, file=file)

        last_timestamps[(button, event_type, value)] = (event.sec, event.usec)
        if event_type in [CallbackData.EVENT_TYPE_DOWN, CallbackData.EVENT_TYPE_UP]:
            last_inverse_timestamps[(button, int(not event_type))] = (
                event.sec,
                event.usec,
            )

        event_counter += 1

    async def dispatch_dev_read_loops(dev):
        ui = ev.UInput.from_device(dev, name=f"{PROGRAM_NAME} {dev.name}")
        with dev.grab_context():
            async for event in dev.async_read_loop():
                dev_read_loop_impl(ui, event)

    for dev_path in dev_paths:
        dev = ev.InputDevice(dev_path)
        aio.ensure_future(dispatch_dev_read_loops(dev))

    aio.get_event_loop().run_forever()


def main() -> int:
    args = parse_args()

    sys.path.append(os.path.dirname(args.config_path))

    devs = ev.list_devices()

    grouped_devs = {}
    for dev in devs:
        dev = ev.InputDevice(dev)
        if dev.name in grouped_devs:
            grouped_devs[dev.name].append(dev.path)
        else:
            grouped_devs[dev.name] = [dev.path]

    processes = []
    for dev_name, dev_paths in grouped_devs.items():
        process = mp.Process(
            target=dev_read_loop,
            args=(args, dev_name, dev_paths, args.config_path),
        )
        processes.append(process)
        process.start()

    for process in processes:
        process.join()

    return 0


if __name__ == "__main__":
    sys.exit(main())
