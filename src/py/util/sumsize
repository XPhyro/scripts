#!/usr/bin/env python3


from sys import stdin
import argparse
import re


def argtypecol(val):
    ival = int(val)
    if ival <= 0:
        raise argparse.ArgumentTypeError(f"{val} is not a valid column value.")
    return ival


def parseargs():
    global args

    parser = argparse.ArgumentParser(description="Sum sizes.")
    parser.add_argument(
        "-b", "--useb", help="print in B instead of iB", action="store_true"
    )
    parser.add_argument(
        "-u", "--unitless", help="total size is given unitless", action="store_true"
    )
    parser.add_argument(
        "-f",
        "--figure",
        help="significant figure count after the dot (default 2)",
        type=int,
    )
    parser.add_argument(
        "-c",
        "--column",
        help="which column to consider as sizes (default 1)",
        type=argtypecol,
        default=1,
    )
    parser.add_argument(
        "-d",
        "--double-input",
        help="use both stdin and files if present",
        action="store_true",
    )
    parser.add_argument(
        "files",
        help="paths to files that contain the sizes. files have precedence over stdin unless -d option is given",
        nargs="*",
    )

    args = parser.parse_args()


def main():
    parseargs()

    if not len(args.files) and stdin.isatty():
        exit(0)

    UNITS = ["k", "m", "g", "t", "p"]

    totalsize = 0
    pf = re.compile(r"[kMGTP]?i?B", re.IGNORECASE)
    ps = re.compile(r"[0-9]+\.?[0-9]*")
    if (not len(args.files) or args.double_input) and not stdin.isatty():
        args.files.append(0)
    for i in args.files:
        with open(i, "r") as f:
            ds = 0
            for s in [re.split("\s", l)[args.column - 1] for l in f.readlines()]:
                sizes = ps.findall(s)
                size = (
                    float(sizes[0]) if isinstance(sizes, list) and len(sizes) else 0.0
                )

                if size == 0:
                    continue

                factors = pf.findall(s)
                factor = (
                    factors[0].lower()
                    if isinstance(factors, list) and len(factors)
                    else "B"
                )

                m = 1
                c = 1024 if "i" in factor else 1000
                for k, w in enumerate(UNITS):
                    if w in factor:
                        m = c ** (k + 1)
                        break

                ds += size * m

            totalsize += ds

    totalsize = int(totalsize)

    if args.unitless:
        print(str(totalsize))
        return

    c = 1000 if args.useb else 1024
    for i, j in reversed(list(enumerate(UNITS))):
        m = totalsize / (c ** (i + 1))
        if m > 1:
            f = f"%.{args.figure if args.figure is not None else 2}f" % m
            print(f"{f}{j.upper()}{'' if args.useb else 'i'}B")
            return
    print(f"{totalsize}B")


if __name__ == "__main__":
    main()
