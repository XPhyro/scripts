#!/usr/bin/env python3


import sys


e = 1 << 0
i = 1 << 1

s = 1 << 2
n = 1 << 3

f = 1 << 4
t = 1 << 5

p = 1 << 6
j = 1 << 7

A = 1 << 8
T = 1 << 9

trait_count = 10

char_to_mask = {
    "e": e,
    "s": s,
    "f": f,
    "p": p,
    "i": i,
    "n": n,
    "t": t,
    "j": j,
    "A": A,
    "T": T,
}

trait_to_char = {value: key for key, value in char_to_mask.items()}


def logerr(*args, **kwargs):
    print(f"{sys.argv[0]}:", *args, file=sys.stderr, **kwargs)


def as_dict(pi, pn, pt, pp, pT) -> dict:
    return {
        i: pi,
        n: pn,
        t: pt,
        p: pp,
        T: pT,
        e: 1 - pi,
        s: 1 - pn,
        f: 1 - pt,
        j: 1 - pp,
        A: 1 - pT,
    }


def get_prob(prob_dict, type_mask) -> float:
    if (
        (type_mask & e and type_mask & i)
        or (type_mask & s and type_mask & n)
        or (type_mask & f and type_mask & t)
        or (type_mask & p and type_mask & j)
        or (type_mask & A and type_mask & T)
    ):
        return 0.00

    prob = 1.00

    if type_mask & e:
        prob *= prob_dict[e]
    elif type_mask & i:
        prob *= prob_dict[i]

    if type_mask & s:
        prob *= prob_dict[s]
    elif type_mask & n:
        prob *= prob_dict[n]

    if type_mask & f:
        prob *= prob_dict[f]
    elif type_mask & t:
        prob *= prob_dict[t]

    if type_mask & p:
        prob *= prob_dict[p]
    elif type_mask & j:
        prob *= prob_dict[j]

    if type_mask & A:
        prob *= prob_dict[A]
    elif type_mask & T:
        prob *= prob_dict[T]

    return prob


def mask_to_str(mask) -> str:
    mask_str = ""
    turbulence = ""

    for idx in range(0, trait_count - 2):
        trait = mask & (1 << idx)
        if trait:
            mask_str += trait_to_char[trait]

    for idx in range(trait_count - 2, trait_count):
        trait = mask & (1 << idx)
        if trait:
            turbulence += trait_to_char[trait]

    if turbulence:
        ret = f"{mask_str}-{turbulence}"
    else:
        ret = mask_str

    return ret.upper()


def print_probs(probs, mask, depth=0) -> None:
    if depth == 0:
        print(f"Prevalence of {mask_to_str(mask)}:")
        print_probs(probs, mask, 1)
        return

    for region, prob, subregions in probs:
        prob = get_prob(prob, mask)
        print(f"{"  " * depth}{region}: {prob * 100:.1f}")
        print_probs(subregions, mask, depth + 1)


def main(args) -> int:
    # data from 16personalities.com
    probs = [
        ("World", as_dict(0.4997, 0.5496, 0.4551, 0.5123, 0.5257), []),
        ("United States", as_dict(0.5020, 0.5460, 0.4260, 0.5148, 0.5358), []),
        (
            "Europe",
            as_dict(0.5116, 0.5703, 0.4627, 0.5254, 0.5391),
            [
                ("Netherlands", as_dict(0.4896, 0.5611, 0.4277, 0.5333, 0.5151), []),
                ("Germany", as_dict(0.5309, 0.5781, 0.4605, 0.5323, 0.5400), []),
            ],
        ),
        (
            "Asia",
            as_dict(0.4895, 0.5358, 0.4575, 0.5105, 0.5334),
            [
                ("Japan", as_dict(0.5154, 0.5470, 0.4387, 0.5429, 0.5383), []),
                ("Turkey", as_dict(0.4839, 0.5685, 0.4955, 0.5258, 0.5408), []),
            ],
        ),
    ]

    for arg in args:
        mask = 0

        for char in arg:
            if char not in char_to_mask:
                logerr("invalid trait given: ")
                return 1
            mask |= char_to_mask[char]

        print_probs(probs, mask)

    return 0


if __name__ == "__main__":
    sys.exit(main(sys.argv[1:]))
