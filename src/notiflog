#!/usr/bin/env python3


from dbus import SessionBus
from dbus.mainloop.glib import DBusGMainLoop
from gi.repository.GLib import MainLoop
from math import floor
from os import remove, fsync
from os.path import isfile
from subprocess import run
from sys import stderr
from time import time


logfilepath = (
    run(["getfl", "notiflog"], capture_output=True).stdout.decode("utf-8").rstrip("\n")
)
print("Found log file path: %s" % logfilepath)
lockfilepath = (
    run(["getfl", "notifloglck"], capture_output=True)
    .stdout.decode("utf-8")
    .rstrip("\n")
)
print("Found lock file path: %s" % lockfilepath)

if not logfilepath or not lockfilepath:
    print("getfl failed, exiting.", file=stderr)
    exit(1)

logfile = open(logfilepath, "a")


def isblacklisted(appname, id, appicon, summary, body, actions, hints, expiretimeout):
    # TODO: Parse a configuration file
    if appname == "Brave" and body[0:3] == " \n\n":
        return True
    return False


def notifications(bus, message):
    try:
        appname, id, appicon, summary, body, actions, hints, expiretimeout = [
            str(arg) for arg in message.get_args_list()
        ]

        print(
            "Received notification:\nSummary:\n%s\nBody:\n%s\nApp Name: %s\nID: %s\nApp Icon: %s\nExpire Timeout: %s\n"
            % (summary, body, appname, id, appicon, expiretimeout)
        )

        if isblacklisted(
            appname, id, appicon, summary, body, actions, hints, expiretimeout
        ):
            print("Notification blacklisted, not logging and closing dunst view")
            run(["dunstctl", "close"])
        elif not isfile(lockfilepath):
            print("Logging notification")
            logfile.write(
                "%s\b%s\b%s\n"
                % (
                    floor(time()),
                    summary.replace("\n", "\r"),
                    body.replace("\n", "\r"),
                )
            )
            logfile.flush()
        else:
            print("Lock file present, not logging")
            remove(lockfile)
    except Exception as e:
        print("Caught exception: " + repr(e))


DBusGMainLoop(set_as_default=True)

bus = SessionBus()
bus.add_match_string_non_blocking(
    "eavesdrop=true, interface='org.freedesktop.Notifications', member='Notify'"
)
bus.add_message_filter(notifications)

mainloop = MainLoop()
mainloop.run()

logfile.close()
