#!/usr/bin/env python3


from dbus import SessionBus
from dbus.mainloop.glib import DBusGMainLoop
from gi.repository.GLib import MainLoop
from math import floor
from os import remove, fsync
from os.path import isfile
from subprocess import run
from sys import stderr
from time import time


logfilepath = (
    run(["getfl", "notiflog"], capture_output=True).stdout.decode("utf-8").rstrip("\n")
)
print("Found log file path: %s" % logfilepath, end="")
lockfilepath = (
    run(["getfl", "notifloglck"], capture_output=True)
    .stdout.decode("utf-8")
    .rstrip("\n")
)
print("Found lock file path: %s" % lockfilepath, end="")

if not logfilepath or not lockfilepath:
    print("getfl failed, exiting.", file=stderr)
    exit(1)

logfile = open(logfilepath, "a")


def notifications(bus, message):
    try:
        appName, id, appIcon, summary, body, actions, hints, expireTimeout = [
            str(arg) for arg in message.get_args_list()
        ]

        print("Received notification:\nSummary:\n%s\nBody:\n%s" % (summary, body))

        if not isfile(lockfilepath):
            print("Logging notification")
            logfile.write(
                "%s\b%s\b%s\n"
                % (
                    floor(time()),
                    summary.replace("\n", "\r"),
                    body.replace("\n", "\r"),
                )
            )
            logfile.flush()
        else:
            print("lock file present, not logging")
            remove(lockfile)
    except:
        pass


DBusGMainLoop(set_as_default=True)

bus = SessionBus()
bus.add_match_string_non_blocking(
    "eavesdrop=true, interface='org.freedesktop.Notifications', member='Notify'"
)
bus.add_message_filter(notifications)

mainloop = MainLoop()
mainloop.run()

logfile.close()
