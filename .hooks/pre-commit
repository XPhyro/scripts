#!/usr/bin/env sh

COLOR_RED='\033[0;31m'
COLOR_CLEAR='\033[0m'

changed_files="$(git diff --cached --name-only)"

(cd src/ && ./.make spell) || {
    printf "${COLOR_RED}Commit introduces typos.${COLOR_CLEAR}\n"
    exit 1
}

printf "%s\n" "$changed_files" \
    | grep -E "^src/c(pp)?/.*\.[ch](pp)?$" \
    | while IFS= read -r path; do
        full_path="$PWD/$path"
        { [ -f "$full_path" ] && [ ! -L "$full_path" ]; } || continue
        file_content="$(cat -- "$full_path")"
        (cd "$(dirname -- "$full_path")" \
             && clang-format -i --style=file -- "$full_path" \
             && {
                 [ -z "$GIT_PRE_COMMIT_NO_ADD" ] \
                 || [ "$GIT_PRE_COMMIT_NO_ADD" -ne 0 ]
             } \
             && git add -- "$full_path"
        )
        printf "%s\n" "$file_content" | cmp -s -- "$full_path" \
            && printf "Formatted file %s\n" "$(basename -- "$full_path")"
    done

printf "%s\n" "$changed_files" \
    | grep "^src/py/.*[^/]" \
    | while IFS= read -r path; do
        [ ! -x "$path" ] || {
            full_path="$PWD/$path"
            [ -e "$full_path" ] || continue
            file_content="$(cat -- "$full_path")"
            (cd "$(dirname -- "$full_path")" \
                 && black -q -- "$full_path" \
                 && {
                     [ -z "$GIT_PRE_COMMIT_NO_ADD" ] \
                     || [ "$GIT_PRE_COMMIT_NO_ADD" -ne 0 ]
                 } \
                 && git add -- "$full_path"
            )
            printf "%s\n" "$file_content" | cmp -s -- "$full_path" \
                && printf "Formatted file %s\n" "$(basename -- "$full_path")"
            pylint --rcfile src/py/.pylintrc --score=false -- "$full_path" || {
                printf "${COLOR_RED}Commit introduces %s with pylint issues.${COLOR_CLEAR}\n" "$(basename -- "$full_path")"
                exit 1
            }
        }
    done || exit 1

printf "%s\n" "$changed_files" \
    | grep "^src/sh/.*[^/]" \
    | grep -v '\.sh$' \
    | xargs -r -d '\n' -n 1 .hooks/has-std-sh.c

current_year="$(date '+%Y')"
grep -Fq -- "2020-$current_year" LICENSE \
    || printf "$COLOR_RED%s$COLOR_CLEAR\n" \
        "Please update the year in the license header."
