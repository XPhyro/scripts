#!/usr/bin/env sh

printhelp() {
    printf "%s\n" \
        "dwmpad [OPTION...] -- [COMMAND...]" \
        "   -d PATH, --directory PATH" \
        "       Execute the command after changing the working directory to PATH." \
        "   -g GEOMETRY, --geometry GEOMETRY" \
        "       Define the geometry that st should use. See st(1) for details." \
        "   -n NUMBER, --number NUMBER" \
        "       Use pad number NUMBER. Number can be an integer between 0 and 9. If 0 is passed, the given command is ignored and statistics about the other pads are shown." \
        "   -h, --help" \
        "       Print help message and exit."
}

printusage() {
    printf "Option [%s] is not valid.\n\n" "$1" >&2
    printhelp
}

logerrq() {
    printf "[ERROR]: %s\n" "$1" >&2
    exit 1
}

assertarg() {
    [ -z "$3" ] && logerrq "Expected $2 argument to $1, exiting."
}

preprocessargs() {
    argcmdcount=0
    for i
    do
        : $(( argcmdcount += 1 ))
        [ "$i" = "--" ] && break
    done
}

parseargs() {
    while [ -n "$1" ]
    do
        if [ "${1%"${1#?}"}" = "-" ]
        then
            if  [ "${1%"${1#??}"}" != "--" ]
            then
                sopt="${1#?}"

                while [ -n "$sopt" ]
                do
                    opt="$( printf "%s" "$sopt" | cut -c1 )"

                    case "$opt"
                    in
                        d) shift; parseargs --directory "$1";;
                        g) shift; parseargs --geometry "$1";;
                        n) shift; parseargs --number "$1";;
                        h) parseargs --help;;
                        *) printusage "$1"; exit 0;;
                    esac

                    sopt="${sopt#?}"
                done
            else
                opt="${1#??}"
                
                case "$opt"
                in
                    directory ) shift; assertarg "-d, --directory" "PATH" "$1"; optdirectory="-d $1";;
                    geometry  ) shift; assertarg "-g, --geometry" "GEOMETRY" "$1"; optgeometry="-g $1";;
                    number    ) shift; assertarg "-n, --number" "NUMBER" "$1"; optnumber="$1";;
                    help      ) printhelp; exit 0;;
                    ""        ) return 0;;
                    *         ) printusage "$1"; exit 0;;
                esac
            fi
        else
            printusage "$1"
            exit 0
        fi

        shift
    done
}

processargs() {
    [ -n "$optnumber" ] && { [ "${#optnumber}" -ne 1 ] || [ -z "$( printf "%s" "$optnumber" | tr -dc '0-9' )" ]; } && logerrq "Invalid NUMBER passed, exiting."
}

main() {
    lckdir="$( getloc dwmpadlck )" || {
        printf "[ERROR]: getloc failed, aborting.\n"
        exit 1
    }

    lck="$( 
        printf "%s\n" "${optnumber:-"$( seq 1 9 )"}" | while IFS= read -r i
        do
            mkdir "$lckdir/$i" 2> /dev/null && {
                printf "%s" "$i"
                break
            }
        done
    )"

    [ -z "$lck" ] && {
        notify-send -t 2000 "dwmpad" "Waiting for lock acquisition..." &

        lck="$(
            while true 
            do
                i="$( inotifywait "$lckdir" -q -e "delete" --format "%f" )"
                [ -n "$optnumber" ] && [ "$i" != "$optnumber" ] && continue
                mkdir "$lckdir/$i" 2> /dev/null && {
                    printf "%s" "$i"
                    break
                }
            done
        )"
    }

    shift "$argcmdcount"

    st $optdirectory $optgeometry -n "dwmpad$lck" -t "dwmpad #$lck" -e dwmpadinit "$lckdir" "$lck" "$@"
    sleep 0.1
    rm -rf "${lckdir:?}/${lck:?}"
}

preprocessargs "$@"
parseargs "$@"
processargs
main "$@"
