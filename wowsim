#!/usr/bin/env sh
# TODO: Save reports.

exitnotif() {
    notify-send -t 3000 "wowsim" "ERROR: $@"
    exit 1
}

region="eu"
realm="kazzak"
chars="xphyro
yphyro
zphyro
wphyro
vphyro
sphyro"

selchar="$( printf "%s" "$chars" | dmenu -i )"
[ -z "$selchar" ] && exit 1

screenname="simc-$selchar"

prevscreenname="$( screen -ls | grep ".$screenname-[0-9]\{10\}\s(Detached)" )" 
[ "$prevscreenname" ] && equals "$( printf "y\nn" | dmenu -i -p "A simulation for $selchar already exists. Would you like to see its progress instead?" )" y yes && {
    "$TERMINAL" -e screen -r "$( printf "%s" "$prevscreenname" | awk '{print $1}' | awk -F '.' '{print $2}' )"
    exit 0
}

screenname="$screenname-$( date +%s )"

csf="$( printf "0\n1" | dmenu -p "Compute scale factors?" )"
equals "$csf" 0 1 || exit 1

tmp="$( mktemp --suffix ".html" )"
screen -dmS "$screenname" sh -c 'simc "armory='"$region"','"$realm"','"$selchar"'" "calculate_scale_factors='"$csf"'" "html='$tmp'"'

pid="$( ps -el --no-headers | grep "$( screen -ls | grep -F ".$screenanme (Detached)" | awk '{print $1}' | awk -F '.' '{print $1}' )" | grep simc | head -n 1 | awk '{print $4}' )"

kill -0 "$pid" || exitnotif "Simulation could not start."

notify-send -t 3000 "Simulation started" "\
Region   : $region
Realm    : $realm
Character: $selchar"

equals "$( printf "y\nn" | dmenu -i -p "See simulation progress?" )" y yes && "$TERMINAL" -e screen -r "$screenname"

pids="$( sudo strace -e trace=none -e signal=none -q -p "$pid" 2>&1 | awk '{print $4}' )"

if [ "$pids" != "0" ] || [ "$( wc -c "$tmp" )" = 0 ]
then
    equals "$( printf "y\nn" | dmenu -i -p "Simulation failed (exit code $pid), would you like to see the report anyways?" )" y yes || exit "$pids"
else
    notify-send -t 1000 "Simulation finished" "Opening simulation report with $BROWSER."
fi

"$BROWSER" --new-window "$tmp" || {
    "$BROWSER" "$tmp" || {
        xph-open "$tmp" || xdg-open "$tmp"
    }
}
