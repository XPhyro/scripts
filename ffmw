#!/usr/bin/env sh
# ffmpeg wrapper for actions I commonly use.
# TODO: Add rm (inverse of crop) and compress subcommands.
# TODO: ffmw might fail to work with symlink infiles for the concat and split subcommands, test and if so fix.

subcommands="concat crop decat help split trim"
execname="${0##*/}"

printhelp() {
    case "$1" in
        concat)
            printf "%s\n" \
"  concat [INFILE]... [OUTFILE]
   Concatenate INFILEs into OUTFILE.

    -F COMMAND, --filter COMMAND
        Pass filenames through COMMAND before processing. If -s is not passed, the filenames will be passed in a file.
    -f, --force
        Overwrite the output file if it exists.
    -h, --help
        Print help message.
    -i, --interactive
        Prompt before overwriting the output file if it exists.
    -M, --move-to-first
        Move OUTFILE to the first INFILE after the operation is finished. First INFILE is computed after option -F is processed. This overrides -m if present.
    -m MOVEFILE, --move-to MOVEFILE
        Move OUTFILE to MOVEFILE after the operation is finished. This is overridden by -M if present.
    -n, --no-clobber
        Do nothing if the output file exists.
    -r, --remove
        Remove INFILE if operation succeeded.
    -s, --stdin
        Instead of passing filenames in a file, pass them from stdin to the filter command. This has no effect if -F is not passed."
            ;;
        crop)
            printf "%s\n" \
"  crop [INFILE] [OUTFILE] [BEGINMARK] [ENDMARK]
   crop INFILE according to BEGINMARK and ENDMARK and write the resultant to OUTFILE. BEGINMARK must be a timestamp in the format HH:MM:SS.sss, where hour and millisecond fields can be omitted. ENDMARK can be a timestamp or a duration. BEGINMARK or ENDMARK can be -, in which case they will respectively be treated as the beginning or the ending of INFILE.

    -f, --force
        Overwrite the output file if it exists.
    -h, --help
        Print help message.
    -i, --interactive
        Prompt before overwriting the output file if it exists.
    -M, --move-to-original
        Move OUTFILE to INFILE after the operation is finished. This overrides -m if present.
    -m MOVEFILE, --move-to MOVEFILE
        Move OUTFILE to MOVEFILE after the operation is finished. This is overridden by -M if present.
    -n, --no-clobber
        Do nothing if the output file exists.
    -r, --remove
        Remove INFILE if operation succeeded."
            ;;
        decat)
            printf "%s\n" \
"  decat [INFILE] [OUTPATTERN] [MARK]...
   Decatenate INFILE at MARKs, naming the output files according to OUTPATTERN. OUTPATTERN only accepts %s and %d. MARKs should not contain the beginning or the ending of the INFILE and must be valid ffmpeg timestamps.

    -f, --force
        Overwrite the output file if it exists.
    -h, --help
        Print help message.
    -i, --interactive
        Prompt before overwriting the output file if it exists.
    -n, --no-clobber
        Do nothing if the output file exists.
    -p, --part-name
        Set OUTPATTERN to '%s Part %d.mkv'. When this option is given, no OUTPATTERN is accepted.
    --no-part-name
        Revert --part-name.
    -r, --remove
        Remove INFILE if operation succeeded."
            ;;
        help)
            printf "%s\n" \
"  help
    All options are ignored."
            ;;
        split)
            printf "%s\n" \
"  split [INFILE] [OUTPATTERN] [PERIOD]
   Split INFILE into PERIOD long chunks, naming the output files according to OUTPATTERN. Period must be a valid ffmpeg timestamp.

    -f, --force
        Overwrite the output file if it exists.
    -h, --help
        Print help message.
    -i, --interactive
        Prompt before overwriting the output file if it exists.
    -n, --no-clobber
        Do nothing if the output file exists.
    -p, --part-name
        Set OUTPATTERN to 'INFILE Part %d.mkv'. When this option is given, no OUTPATTERN is accepted.
    --no-part-name
        Revert --part-name.
    -r, --remove
        Remove INFILE if operation succeeded."
            ;;
        trim)
            printf "%s\n" \
"  trim [INFILE] [OUTFILE]
   Trim the black bars of INFILE and write the resultant to OUTFILE.

    -f, --force
        Overwrite the output file if it exists.
    -h, --help
        Print help message.
    -i, --interactive
        Prompt before overwriting the output file if it exists.
    -M, --move-to-original
        Move OUTFILE to INFILE after the operation is finished. This overrides -m if present.
    -m MOVEFILE, --move-to MOVEFILE
        Move OUTFILE to MOVEFILE after the operation is finished. This is overridden by -M if present.
    -n, --no-clobber
        Do nothing if the output file exists.
    -r, --remove
        Remove INFILE if the operation succeeded."
            ;;
        *)
            printf "%s\n" \
"$execname [OPTION]... SUBCOMMAND [OPTION]... [FILE]... -- [FILE]...

Global options:
    -h, --help
        Print help message.
    -l, --loud
        Reverse a single -q option.
    -p, --print-performance
        Print performance statistics after ffmpeg finishes.
    --no-print-performance
        Revert -p.
    -q, --quiet
        Suppress stdout. Pass twice to also suppress stderr. This option takes effect only after arguments are parsed.
    -t COUNT, --threads COUNT
        Pass -threads COUNT to ffmpeg."

            printf "\nValid subcommands: %s\n\n" "$subcommands"
            lastsubcmd="$(printf "%s" "$subcommands" | sed 's/.*\s//')"
            for i in $subcommands; do
                printhelp "$i"
                [ "$i" = "$lastsubcmd" ] || printf "\n"
            done
            ;;
    esac
}

printusage() {
    printf "Option [%s] is not valid.\n\n" "$1" >&2
    printhelp "$2"
    exit 1
}

printferr() {
    # shellcheck disable=SC2059
    >&2 printf "$@"
}

printferrq() {
    printferr "$@"
    exit 1
}

assertarg() {
    [ -z "$3" ] && printferrq "Expected %s argument to %s, exiting.\n" "$2" "$1"
}

assertcmd() {
    if [ -n "$1" ]; then
        iscmdvalid="0"
        for i in $subcommands; do
            [ "$i" = "$1" ] && iscmdvalid="1"
        done
        [ "$iscmdvalid" = "1" ] || printferrq "Subcommand [%s] is not valid, exiting.\n" "$1"
    else
        printferrq "Expected subcommand, exiting.\n"
    fi
}

parseargs() {
    [ -n "$1" ] || assertcmd

    while [ -n "$1" ]; do
        if [ "${1%"${1#?}"}" = "-" ]; then
            if [ "${1%"${1#??}"}" != "--" ]; then
                sopt="${1#?}"

                while [ -n "$sopt" ]; do
                    opt="${sopt%"${sopt#?}"}"

                    case "$opt" in
                        h) printhelp; exit 0;;
                        l) loud="${loud}1";;
                        p) pperf="perf stat";;
                        q) quiet="${quiet}1";;
                        t) shift; assertarg "-t" "COUNT" "$1"; threads="-threads $1";;
                        *) printusage "-$opt";;
                    esac

                    sopt="${sopt#?}"
                done
            else
                opt="${1#??}"
                
                case "$opt" in
                    help                 ) printhelp; exit 0;;
                    loud                 ) loud="${loud}1";;
                    print-performance    ) pperf="perf stat";;
                    no-print-performance ) pperf="";;
                    quiet                ) quiet="${quiet}1";;
                    threads              ) shift; assertarg "--threads" "COUNT" "$1"; threads="-threads $1";;
                    *                    ) printusage "--$opt";;
                esac
            fi
        else
            break
        fi

        shift
    done

    cmd="$1"
    assertcmd "$cmd"
    shift

    case "$cmd" in
        concat)
            while [ -n "$1" ]; do
                if [ "${1%"${1#?}"}" = "-" ]; then
                    if ! [ "${1%"${1#??}"}" = "--" ]; then
                        sopt="${1#?}"

                        while [ -n "$sopt" ]; do
                            opt="${sopt%"${sopt#?}"}"

                            case "$opt" in
                                F) shift; assertarg "-F" "COMMAND" "$1"; filter="$1";;
                                f) overwrite="-y";;
                                h) printhelp "concat"; exit 0;;
                                i) overwrite="";;
                                M) movefirst="1";;
                                m) shift; assertarg "-m" "MOVEFILE" "$1"; movefile="$1";;
                                n) overwrite="-n";;
                                r) remove="1";;
                                s) stdin="1";;
                                *) printusage "-$opt" "concat";;
                            esac

                            sopt="${sopt#?}"
                        done
                    else
                        opt="${1#??}"
                        
                        case "$opt" in
                            filter        ) shift; assertarg "--filter" "COMMAND" "$1"; filter="$1";;
                            force         ) overwrite="-y";;
                            help          ) printhelp "concat"; exit 0;;
                            interactive   ) overwrite="";;
                            move-to-first ) movefirst="1";;
                            move-to       ) shift; assertarg "--move-to" "MOVEFILE" "$1"; movefile="$1";;
                            no-clobber    ) overwrite="-n";;
                            remove        ) remove="1";;
                            stdin         ) stdin="1";;
                            ""            ) shift; break;;
                            *             ) printusage "--$opt" "concat";;
                        esac
                    fi
                else
                    argv="$argv
$1"
                fi

                shift
            done

            for i; do
                argv="$argv
$1"
            done

            argv="$(printf "%s" "$argv" | tail -n +2)"

            infls="$(printf "%s" "$argv" | head -n -1)"
            outfl="$(printf "%s" "$argv" | tail -n 1)"

            [ "$(printf "%s\n" "$infls" | wc -l)" -lt 2 ] && printferrq "At least 2 in files and exactly one out file are required, exiting.\n"

            printf "%s" "$infls" | grep -Fxq -- "$outfl" && printferrq "OUTFILE cannot be included in INFILEs, exiting.\n"
            ;;
        crop)
            while [ -n "$1" ]; do
                [ "$1" = "-" ] && {
                    argv="$argv
$1"
                    shift
                    continue
                }
                if [ "${1%"${1#?}"}" = "-" ]; then
                    if ! [ "${1%"${1#??}"}" = "--" ]; then
                        sopt="${1#?}"

                        while [ -n "$sopt" ]; do
                            opt="${sopt%"${sopt#?}"}"

                            case "$opt" in
                                f ) overwrite="-y";;
                                h ) printhelp "crop"; exit 0;;
                                i ) overwrite="";;
                                M ) moveorig="1";;
                                m ) shift; assertarg "-m" "MOVEFILE" "$1"; movefile="$1";;
                                n ) overwrite="-n";;
                                r ) remove="1";;
                                * ) printusage "-$opt" "crop";;
                            esac

                            sopt="${sopt#?}"
                        done
                    else
                        opt="${1#??}"
                        
                        case "$opt" in
                            force            ) overwrite="-y";;
                            help             ) printhelp "crop"; exit 0;;
                            interactive      ) overwrite="";;
                            move-to-original ) moveorig="1";;
                            move-to          ) shift; assertarg "--move-to" "MOVEFILE" "$1"; movefile="$1";;
                            no-clobber       ) overwrite="-n";;
                            remove           ) remove="1";;
                            ""               ) shift; break;;
                            *                ) printusage "--$opt" "crop";;
                        esac
                    fi
                else
                    argv="$argv
$1"
                fi

                shift
            done

            for i; do
                argv="$argv
$1"
            done

            argv="$(printf "%s" "$argv" | tail -n +2)"

            [ "$(printf "%s\n" "$argv" | wc -l)" -ne 4 ] && printferrq "Exactly 4 positional arguments are required and accepted, exiting.\n"

            infl="$(printf "%s\n" "$argv" | head -n 1)"
            outfl="$(printf "%s\n" "$argv" | tail -n 3 | head -n 1)"
            beginmark="$(printf "%s\n" "$argv" | tail -n 2 | head -n 1)"
            endmark="$(printf "%s\n" "$argv" | tail -n 1)"

            [ "$outfl" = "$infl" ] && printferrq "OUTFILE cannot be the same as INFILE, exiting.\n"
            [ "$beginmark" = "-" ] && beginmark="0"

            if [ "$endmark" = "-" ]; then
                endmark=""
            else
                endmarkts="$(printf "%s\n" "$marks" | sed -E '/^([0-9]+:)?[0-9]{2}:[0-9]{2}(.[0-9]{3})?$/d')"
                endmarkdur="$(printf "%s\n" "$marks" | sed -E '/^[0-9]+(\.[0-9]+)?$/d')"

                if [ -n "$endmarkts" ]; then
                    [ -n "$endmarkdur" ] && printferrq "ENDMARK must either be a timestamp or a duration.\n"
                    endmark="-t $endmark"
                else
                    endmark="-to $endmark"
                fi
            fi

            [ "$moveorig" = "1" ] && movefile="$infl"
            ;;
        decat)
            while [ -n "$1" ]; do
                if [ "${1%"${1#?}"}" = "-" ]; then
                    if ! [ "${1%"${1#??}"}" = "--" ]; then
                        sopt="${1#?}"

                        while [ -n "$sopt" ]; do
                            opt="${sopt%"${sopt#?}"}"

                            case "$opt" in
                                f) overwrite="-y";;
                                h) printhelp "decat"; exit 0;;
                                i) overwrite="";;
                                n) overwrite="-n";;
                                p) partname="1";;
                                r) remove="1";;
                                *) printusage "-$opt" "decat";;
                            esac

                            sopt="${sopt#?}"
                        done
                    else
                        opt="${1#??}"
                        
                        case "$opt" in
                            force         ) overwrite="-y";;
                            help          ) printhelp "decat"; exit 0;;
                            interactive   ) overwrite="";;
                            no-clobber    ) overwrite="-n";;
                            part-name     ) partname="1";;
                            no-part-name  ) partname="0";;
                            remove        ) remove="1";;
                            ""            ) shift; break;;
                            *             ) printusage "--$opt" "decat";;
                        esac
                    fi
                else
                    argv="$argv
$1"
                fi

                shift
            done

            for i; do
                argv="$argv
$1"
            done

            argv="$(printf "%s" "$argv" | tail -n +2)"
            infl="$(printf "%s\n" "$argv" | head -n 1)"

            if [ "$partname" = "1" ]; then
                [ "$(printf "%s\n" "$argv" | wc -l)" -lt 2 ] && printferrq "--part-name is given. At least 2 positional arguments are expected, exiting.\n"
                outpat="%s Part %d.mkv"
                marks="$(printf "%s\n" "$argv" | tail -n +2)"
            else
                [ "$(printf "%s\n" "$argv" | wc -l)" -lt 3 ] && printferrq "At least 3 positional arguments are expected, exiting.\n"
                outpat="$(printf "%s\n" "$argv" | tail -n 2 | head -n 1)"
                marks="$(printf "%s\n" "$argv" | tail -n +3)"
            fi

            outpat="$(printf "%s" "$outpat" | sed 's/\([^%\\]*\)%s/\1'"${infl%.*}"'/g')"
            ;;
        help)
            for i; do
                if [ "$i" = "-h" ] || [ "$i" = "--help" ]; then
                    printhelp "help"
                    exit 0
                else
                    printusage "$i" "help"
                fi
            done
            ;;
        split)
            while [ -n "$1" ]; do
                if [ "${1%"${1#?}"}" = "-" ]; then
                    if ! [ "${1%"${1#??}"}" = "--" ]; then
                        sopt="${1#?}"

                        while [ -n "$sopt" ]; do
                            opt="${sopt%"${sopt#?}"}"

                            case "$opt" in
                                f) overwrite="-y";;
                                h) printhelp "split"; exit 0;;
                                i) overwrite="";;
                                n) overwrite="-n";;
                                p) partname="1";;
                                r) remove="1";;
                                *) printusage "-$opt" "split";;
                            esac

                            sopt="${sopt#?}"
                        done
                    else
                        opt="${1#??}"
                        
                        case "$opt" in
                            force         ) overwrite="-y";;
                            help          ) printhelp "split"; exit 0;;
                            interactive   ) overwrite="";;
                            no-clobber    ) overwrite="-n";;
                            part-name     ) partname="1";;
                            no-part-name  ) partname="0";;
                            remove        ) remove="1";;
                            ""            ) shift; break;;
                            *             ) printusage "--$opt" "split";;
                        esac
                    fi
                else
                    argv="$argv
$1"
                fi

                shift
            done

            for i; do
                argv="$argv
$1"
            done

            argv="$(printf "%s" "$argv" | tail -n +2)"
            infl="$(printf "%s\n" "$argv" | head -n 1)"

            if [ "$partname" = "1" ]; then
                [ "$(printf "%s\n" "$argv" | wc -l)" -ne 2 ] && printferrq "--part-name is given. Exactly 2 positional arguments are required and accepted, exiting.\n"
                outpat="${infl%.*} Part %d.mkv"
            else
                [ "$(printf "%s\n" "$argv" | wc -l)" -ne 3 ] && printferrq "Exactly 3 positional arguments are required and accepted, exiting.\n"
                outpat="$(printf "%s\n" "$argv" | tail -n 2 | head -n 1)"
            fi

            period="$(printf "%s\n" "$argv" | tail -n 1)"
            ;;
        trim)
            while [ -n "$1" ]; do
                if [ "${1%"${1#?}"}" = "-" ]; then
                    if ! [ "${1%"${1#??}"}" = "--" ]; then
                        sopt="${1#?}"

                        while [ -n "$sopt" ]; do
                            opt="${sopt%"${sopt#?}"}"

                            case "$opt" in
                                f) overwrite="-y";;
                                h) printhelp "trim"; exit 0;;
                                i) overwrite="";;
                                M) movefirst="1";;
                                m) shift; assertarg "-m" "MOVEFILE" "$1"; movefile="$1";;
                                n) overwrite="-n";;
                                r) remove="1";;
                                *) printusage "-$opt" "trim";;
                            esac

                            sopt="${sopt#?}"
                        done
                    else
                        opt="${1#??}"
                        
                        case "$opt" in
                            force            ) overwrite="-y";;
                            help             ) printhelp "trim"; exit 0;;
                            interactive      ) overwrite="";;
                            move-to-original ) moveorig="1";;
                            move-to          ) shift; assertarg "--move-to" "MOVEFILE" "$1"; movefile="$1";;
                            no-clobber       ) overwrite="-n";;
                            remove           ) remove="1";;
                            ""               ) shift; break;;
                            *                ) printusage "--$opt" "trim";;
                        esac
                    fi
                else
                    argv="$argv
$1"
                fi

                shift
            done

            for i; do
                argv="$argv
$1"
            done

            argv="$(printf "%s" "$argv" | tail -n +2)"

            [ "$(printf "%s\n" "$argv" | wc -l)" -ne 2 ] && printferrq "Exactly 2 positional arguments are required and accepted, exiting.\n"

            infl="$(printf "%s\n" "$argv" | head -n 1)"
            outfl="$(printf "%s\n" "$argv" | tail -n 1)"


            [ "$outfl" = "$infl" ] && printferrq "OUTFILE cannot be the same as INFILE, exiting.\n"

            [ "$moveorig" = "1" ] && movefile="$infl"
            ;;
    esac

    mvoverwrite="${overwrite:-"-i"}"
    [ "$mvoverwrite" = "-y" ] && mvoverwrite="-f"
}

concat() {
    lstfl="$(mktemp -p .)"
    trap 'rm -f -- "$lstfl"' HUP INT QUIT TERM

    printf "%s\n" "$infls" | while IFS= read -r i; do
        [ -f "$i" ] || printferrq "No such file [%s], exiting.\n" "$i"

        printf "%s\n" "$i" >> "$lstfl"
    done

    [ -n "$filter" ] && {
        if [ -n "$stdin" ] ; then
            $filter < "$lstfl" | sponge "$lstfl"
        else
            $filter "$lstfl" | sponge "$lstfl"
        fi
    }

    [ "$movefirst" = "1" ] && movefile="$(head -n 1 "$lstfl")"

    awk '{print '"\"file '\""'$0'"\"'\""'}' "$lstfl" | sponge "$lstfl"

    $pperf ffmpeg -hide_banner $threads $overwrite -f concat -safe 0 -i "$lstfl" -c copy "$outfl" || {
        printferr "ffmpeg failed, exiting.\n"
        [ -f "$lstfl" ] && rm -- "$lstfl"
        exit 1
    }

    [ "$remove" = "1" ] && printf "%s\n" "$infls" | xargs -d '\n' -r rm --

    [ -n "$movefile" ] && mv $mvoverwrite -- "$outfl" "$movefile"

    [ -f "$lstfl" ] && rm -f -- "$lstfl"
}

crop() {
    $pperf ffmpeg -hide_banner $threads $overwrite -ss "$beginmark" -i "$infl" $endmark -safe 0 -c copy "$outfl" || printferrq "ffmpeg failed, exiting.\n"

    [ "$remove" = "1" ] && rm -- "$infl"
    [ -n "$movefile" ] && mv $mvoverwrite -- "$outfl" "$movefile"
}

decat() {
    $pperf ffmpeg -hide_banner $threads $overwrite -i "$infl" -to "$(printf "%s\n" "$marks" | head -n 1)" -safe 0 -c copy "$(printf "%s" "$outpat" | sed 's/\([^%\\]*\)%d/\11/g')" || printferrq "ffmpeg failed, exiting.\n"

    n=2
    [ "$(printf "%s\n" "$marks" | wc -l)" -ne 1 ] && while IFS= read -r ss <&3 && IFS= read -r to <&4
    do
        $pperf ffmpeg -hide_banner $threads $overwrite -ss "$ss" -i "$infl" -to "$to" -safe 0 -c copy "$(printf "%s" "$outpat" | sed 's/\([^%\\]*\)%d/\1'"$n"'/g')" || printferrq "ffmpeg failed, exiting.\n"
        : $((n += 1))
    done 3<<EOF1 4<<EOF2
$(printf "%s\n" "$marks" | head -n -1)
EOF1
$(printf "%s\n" "$marks" | tail -n +2)
EOF2

    $pperf ffmpeg -hide_banner $threads $overwrite -ss "$(printf "%s\n" "$marks" | tail -n 1)" -i "$infl" -safe 0 -c copy "$(printf "%s" "$outpat" | sed 's/\([^%\\]*\)%d/\1'"$n"'/g')" || printferrq "ffmpeg failed, exiting.\n"

    [ "$remove" = "1" ] && rm -- "$infl"
}

help() {
    printhelp
}

split() {
    [ -f "$infl" ] || printferrq "No such file [%s], exiting.\n" "$infl"
    $pperf ffmpeg -hide_banner $threads $overwrite -i "$infl" -f segment -safe 0 -c copy -map 0 -segment_time "$period" -reset_timestamps 1 "$outpat" || printferrq "ffmpeg failed, exiting.\n"
    [ "$remove" = "1" ] && rm -- "$infl"
}

trim() {
    [ -f "$infl" ] || printferrq "No such file [%s], exiting.\n" "$infl"

    $pperf ffmpeg -hide_banner $threads $overwrite -i "$infl" -vf "$(ffmpeg -hide_banner -ss 100 -i "$infl" -vframes 100 -vf cropdetect -f null - 2>&1 | grep "^.Parsed_cropdetect_0 @ 0x[0-9a-f].*crop=.*$" | awk '{print $NF}' | LC_ALL=C sort | LC_ALL=C uniq -c | LC_ALL=C sort -nr | head -n 1 | sed 's/^\s*[0-9]\+\s\+\(.*\)$/\1/')" -safe 0 -c:a copy "$outfl"

    [ "$remove" = "1" ] && rm -- "$infl"

    [ -n "$movefile" ] && mv $mvoverwrite -- "$outfl" "$movefile"
}

main() {
    "$cmd"
}

parseargs "$@"

qldiff=$((${#quiet} - ${#loud}))

if [ "$qldiff" -eq 1 ]; then
    main > /dev/null
elif [ "$qldiff" -gt 1 ]; then
    main > /dev/null 2>&1
else
    main
fi
